

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author AVOTRA
 */
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableColumn;
import java.awt.*;
import javax.swing.DefaultCellEditor;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import javax.swing.text.PlainDocument;
import java.util.Calendar;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.*;
import javax.swing.*;
import javax.swing.text.AbstractDocument;

public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    // Définissez le format de date souhaité
    SimpleDateFormat sdf = new SimpleDateFormat("dd / MM / yyyy");
    // Création de l'instance de NumberFormat avec le locale français
    NumberFormat nbFormat = NumberFormat.getInstance(Locale.FRANCE);
    //Variable globale pour stocker les infos de réservation lors de l'enregistremenent du séjour
    ArrayList<String> bookingInformation = new ArrayList<>();
    int lastChecked = -1;

    public Main() {
        initComponents();
//        displayRooms();
//        // Obtenir la date d'aujourd'hui
//        LocalDate currentDate = LocalDate.now();
//
//        // Convertir la date d'aujourd'hui en objet Date
//        Date startDate = Date.valueOf(currentDate);
//        bookingDate.setText(sdf.format(startDate));
//        // Définir la date de fin (ici, nous utilisons la même date que la date de début)
//        Date endDate = Date.valueOf(currentDate);
//        displayAvailableBookingRooms(startDate, endDate, avalaibleRoomsBookingTable);
        OldBookingDestructor.oldBookingDestructor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        horizontalMenu = new training.SideBar();
        logo = new javax.swing.JLabel();
        setting = new javax.swing.JLabel();
        displayTitle = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        generalSearch = new javax.swing.JTextField();
        searchButton = new javax.swing.JLabel();
        searchBar = new javax.swing.JLabel();
        burgerMenu1 = new javax.swing.JLabel();
        notification = new javax.swing.JLabel();
        mail = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        verticalMenu = new training.SideBar();
        visitMenu = new training.SideBar();
        visitIcon = new javax.swing.JLabel();
        visitLabel = new javax.swing.JLabel();
        dashboardMenu = new training.SideBar();
        dashboardLabel = new javax.swing.JLabel();
        dashboardIcon = new javax.swing.JLabel();
        roomsMenu = new training.SideBar();
        roomsIcon = new javax.swing.JLabel();
        roomsLabel = new javax.swing.JLabel();
        bookingMenu = new training.SideBar();
        bookingIcon = new javax.swing.JLabel();
        bookingLabel = new javax.swing.JLabel();
        displayField = new javax.swing.JTabbedPane();
        dashboard = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jLabel59 = new javax.swing.JLabel();
        roomsTaken = new javax.swing.JLabel();
        jPanel42 = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        jLabel55 = new javax.swing.JLabel();
        balance = new javax.swing.JLabel();
        jPanel43 = new javax.swing.JPanel();
        jPanel34 = new javax.swing.JPanel();
        jLabel58 = new javax.swing.JLabel();
        roomsAvailable = new javax.swing.JLabel();
        jPanel41 = new javax.swing.JPanel();
        jPanel38 = new javax.swing.JPanel();
        jPanel39 = new javax.swing.JPanel();
        jLabel63 = new javax.swing.JLabel();
        roomsTotal = new javax.swing.JLabel();
        jPanel40 = new javax.swing.JPanel();
        rooms = new javax.swing.JPanel();
        sideBar5 = new training.SideBar();
        sideBar4 = new training.SideBar();
        sideBar1 = new training.SideBar();
        roomsSearch = new javax.swing.JTextField();
        roomsSearchButton = new javax.swing.JLabel();
        roomsSearchBar = new javax.swing.JLabel();
        sideBar2 = new training.SideBar();
        jPanel3 = new javax.swing.JPanel();
        allRoomsMenu = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        availableRoomsMenu = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        bookedRoomsMenu = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        roomsIcon2 = new javax.swing.JLabel();
        roomsIcon1 = new javax.swing.JLabel();
        roomsDetailsField = new javax.swing.JTabbedPane();
        allRoomsField = new training.SideBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        avalaibleRoomsField = new training.SideBar();
        jScrollPane6 = new javax.swing.JScrollPane();
        avalaibleRoomListTable = new javax.swing.JTable();
        startDateChooser = new com.toedter.calendar.JDateChooser();
        filterAvailableRooms = new javax.swing.JComboBox<>();
        bookedRoomsField = new training.SideBar();
        booking = new javax.swing.JPanel();
        sideBar3 = new training.SideBar();
        jPanel8 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        fieldBookingTitle = new javax.swing.JLabel();
        bookingFields = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        sideBar6 = new training.SideBar();
        sideBar8 = new training.SideBar();
        visitDuration = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        sideBar10 = new training.SideBar();
        jPanel9 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        customerFirstName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        sideBar11 = new training.SideBar();
        jPanel13 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        customerEmail = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        sideBar12 = new training.SideBar();
        jPanel12 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        customerSurname = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        sideBar14 = new training.SideBar();
        bookingDate = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        sideBar15 = new training.SideBar();
        jPanel15 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        inputDate = new com.toedter.calendar.JDateChooser();
        jLabel20 = new javax.swing.JLabel();
        sideBar9 = new training.SideBar();
        outputDate = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        sideBar13 = new training.SideBar();
        roomsNumber = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        saveBooking = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        test = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        sideBar7 = new training.SideBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        avalaibleRoomsBookingTable = new javax.swing.JTable();
        jPanel22 = new javax.swing.JPanel();
        searchBookRooms = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        filterBooking = new javax.swing.JComboBox<>();
        jPanel7 = new javax.swing.JPanel();
        sideBar16 = new training.SideBar();
        jScrollPane3 = new javax.swing.JScrollPane();
        bookedRoomsTable = new javax.swing.JTable();
        jPanel20 = new javax.swing.JPanel();
        nameCustomer = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel28 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        editBooking = new javax.swing.JLabel();
        deleteBooking = new javax.swing.JLabel();
        visit = new javax.swing.JPanel();
        sideBar17 = new training.SideBar();
        visitField = new javax.swing.JTabbedPane();
        visitForm = new training.SideBar();
        sideBar23 = new training.SideBar();
        outputDate2 = new javax.swing.JTextField();
        jPanel28 = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        sideBar22 = new training.SideBar();
        visitDuration2 = new javax.swing.JTextField();
        jPanel27 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        sideBar24 = new training.SideBar();
        roomsNb2 = new javax.swing.JTextField();
        jPanel29 = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        sideBar21 = new training.SideBar();
        jPanel26 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        inputDate2 = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        sideBar20 = new training.SideBar();
        customerPhone = new javax.swing.JTextField();
        jPanel25 = new javax.swing.JPanel();
        phoneLabel = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        sideBar19 = new training.SideBar();
        customerFirstName2 = new javax.swing.JTextField();
        jPanel24 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        sideBar18 = new training.SideBar();
        customerSurname2 = new javax.swing.JTextField();
        jPanel19 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        visitFormBuuton1 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        listFormButton1 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        availableRoomsTable = new javax.swing.JTable();
        sideBar25 = new training.SideBar();
        roomsCount = new javax.swing.JTextField();
        jPanel30 = new javax.swing.JPanel();
        jLabel46 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        sideBar26 = new training.SideBar();
        jPanel31 = new javax.swing.JPanel();
        jLabel50 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        saveVisitButton = new javax.swing.JPanel();
        jLabel54 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        errorMessage2 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        visitListTitle1 = new javax.swing.JLabel();
        visitList = new training.SideBar();
        visitFormBuuton2 = new javax.swing.JPanel();
        jLabel47 = new javax.swing.JLabel();
        listFormButton3 = new javax.swing.JPanel();
        jLabel48 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        visitListTable = new javax.swing.JTable();
        visitListTitle = new javax.swing.JLabel();
        jPanel32 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        visitListComboBox = new javax.swing.JComboBox<>();
        deleteVisitList = new javax.swing.JLabel();
        editVisitList = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        logo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logo.setText("Mahazaka Resort");
        horizontalMenu.add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 130, 20));

        setting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/paramètre.png"))); // NOI18N
        setting.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        horizontalMenu.add(setting, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 30, 30, 20));

        displayTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        displayTitle.setText("Dashboard");
        horizontalMenu.add(displayTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 130, 40));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        generalSearch.setBackground(new java.awt.Color(245, 245, 245));
        generalSearch.setForeground(new java.awt.Color(204, 204, 204));
        generalSearch.setText("Rechercher...");
        generalSearch.setBorder(null);
        generalSearch.setRequestFocusEnabled(false);
        generalSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                generalSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                generalSearchFocusLost(evt);
            }
        });
        jPanel2.add(generalSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 180, 20));

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/loupe.png"))); // NOI18N
        searchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel2.add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, 20, -1));

        searchBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/inputField.png"))); // NOI18N
        jPanel2.add(searchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        horizontalMenu.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 230, 40));

        burgerMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/burger2.png"))); // NOI18N
        burgerMenu1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        horizontalMenu.add(burgerMenu1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, 30, 20));

        notification.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/notification.png"))); // NOI18N
        notification.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        horizontalMenu.add(notification, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 30, 30, 20));

        mail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/message.png"))); // NOI18N
        mail.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        horizontalMenu.add(mail, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 30, 30, 20));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/myLogo.png"))); // NOI18N
        horizontalMenu.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 60, -1));

        jPanel1.add(horizontalMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 80));

        visitMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                visitMenuMouseClicked(evt);
            }
        });

        visitIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/visit.png"))); // NOI18N
        visitMenu.add(visitIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 40, 30));

        visitLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        visitLabel.setForeground(new java.awt.Color(153, 153, 153));
        visitLabel.setText("Séjour");
        visitMenu.add(visitLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 120, 30));

        verticalMenu.add(visitMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, 190, 50));
        visitMenu.setCursor(new Cursor(Cursor.HAND_CURSOR));

        dashboardMenu.setBackground(new java.awt.Color(0, 51, 204));
        dashboardMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dashboardMenuMouseClicked(evt);
            }
        });

        dashboardLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        dashboardLabel.setForeground(new java.awt.Color(255, 255, 255));
        dashboardLabel.setText("Dashboard");
        dashboardMenu.add(dashboardLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 120, 30));

        dashboardIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/dashboardWhite.png"))); // NOI18N
        dashboardMenu.add(dashboardIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 10, -1, 30));

        verticalMenu.add(dashboardMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 190, 50));
        dashboardMenu.setCursor(new Cursor(Cursor.HAND_CURSOR));

        roomsMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomsMenuMouseClicked(evt);
            }
        });

        roomsIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/rooms.png"))); // NOI18N
        roomsMenu.add(roomsIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 40, 40));

        roomsLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        roomsLabel.setForeground(new java.awt.Color(153, 153, 153));
        roomsLabel.setText("Chambres");
        roomsMenu.add(roomsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 120, 30));

        verticalMenu.add(roomsMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 190, 50));
        roomsMenu.setCursor(new Cursor(Cursor.HAND_CURSOR));

        bookingMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookingMenuMouseClicked(evt);
            }
        });

        bookingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/booking.png"))); // NOI18N
        bookingMenu.add(bookingIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 40, 30));

        bookingLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bookingLabel.setForeground(new java.awt.Color(153, 153, 153));
        bookingLabel.setText("Réservation");
        bookingMenu.add(bookingLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 120, 30));

        verticalMenu.add(bookingMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 190, 50));
        bookingMenu.setCursor(new Cursor(Cursor.HAND_CURSOR));

        jPanel1.add(verticalMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 190, 690));

        displayField.setBackground(new java.awt.Color(245, 245, 245));

        dashboard.setBackground(new java.awt.Color(245, 245, 245));
        dashboard.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel23.setBackground(new java.awt.Color(255, 255, 255));
        jPanel23.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel59.setBackground(new java.awt.Color(255, 255, 255));
        jLabel59.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel59.setForeground(new java.awt.Color(102, 102, 102));
        jLabel59.setText("CHAMBRES OCCUPÉES");
        jPanel23.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 150, -1));

        roomsTaken.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jPanel23.add(roomsTaken, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 180, 30));

        jPanel42.setBackground(new java.awt.Color(153, 0, 0));

        javax.swing.GroupLayout jPanel42Layout = new javax.swing.GroupLayout(jPanel42);
        jPanel42.setLayout(jPanel42Layout);
        jPanel42Layout.setHorizontalGroup(
            jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
        );
        jPanel42Layout.setVerticalGroup(
            jPanel42Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        jPanel23.add(jPanel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 210, 10));

        dashboard.add(jPanel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 20, 210, 90));

        jPanel33.setBackground(new java.awt.Color(255, 255, 255));
        jPanel33.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel55.setBackground(new java.awt.Color(255, 255, 255));
        jLabel55.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel55.setForeground(new java.awt.Color(102, 102, 102));
        jLabel55.setText("SOLDE");
        jPanel33.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 60, -1));

        balance.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        balance.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        balance.setText(SelectBalance.selectBalance() + " Ar");
        jPanel33.add(balance, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 190, 30));

        jPanel43.setBackground(new java.awt.Color(102, 0, 102));

        javax.swing.GroupLayout jPanel43Layout = new javax.swing.GroupLayout(jPanel43);
        jPanel43.setLayout(jPanel43Layout);
        jPanel43Layout.setHorizontalGroup(
            jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
        );
        jPanel43Layout.setVerticalGroup(
            jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        jPanel33.add(jPanel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 210, 10));

        dashboard.add(jPanel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 20, 210, 90));

        jPanel34.setBackground(new java.awt.Color(255, 255, 255));
        jPanel34.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel58.setBackground(new java.awt.Color(255, 255, 255));
        jLabel58.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel58.setForeground(new java.awt.Color(102, 102, 102));
        jLabel58.setText("CHAMBRES LIBRES");
        jPanel34.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 130, -1));

        roomsAvailable.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jPanel34.add(roomsAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 190, 30));

        jPanel41.setBackground(new java.awt.Color(0, 102, 51));

        javax.swing.GroupLayout jPanel41Layout = new javax.swing.GroupLayout(jPanel41);
        jPanel41.setLayout(jPanel41Layout);
        jPanel41Layout.setHorizontalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );
        jPanel41Layout.setVerticalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        jPanel34.add(jPanel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 270, 10));

        dashboard.add(jPanel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, 210, 90));

        jPanel38.setBackground(new java.awt.Color(245, 245, 245));
        jPanel38.setLayout(new java.awt.BorderLayout());

        // Ajouter le diagramme en donut au dashboard
        //jPanel38.add(donutChartPanel, BorderLayout.CENTER);

        dashboard.add(jPanel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 170, 930, 490));

        jPanel39.setBackground(new java.awt.Color(255, 255, 255));
        jPanel39.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel63.setBackground(new java.awt.Color(255, 255, 255));
        jLabel63.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel63.setForeground(new java.awt.Color(102, 102, 102));
        jLabel63.setText("NOMBRE DE CHAMBRES");
        jPanel39.add(jLabel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 150, -1));

        roomsTotal.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        roomsTotal.setText(String.valueOf(RoomsCount.roomsCount()));
        LocalDate today = LocalDate.now();
        Date todayDate = Date.valueOf(today);
        roomsAvailable.setText(String.valueOf(AvailableRoomsCount.availableRoomsCount(todayDate, todayDate)));
        roomsTaken.setText(String.valueOf(Integer.parseInt(roomsTotal.getText()) - Integer.parseInt(roomsAvailable.getText())));
        // Créer et ajouter le diagramme en donut au dashboard
        DonutChartPanel donutChartPanel = new DonutChartPanel(Integer.parseInt(roomsAvailable.getText()), Integer.parseInt(roomsTaken.getText()));
        jPanel38.add(donutChartPanel, BorderLayout.CENTER);
        jPanel39.add(roomsTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 140, 30));

        jPanel40.setBackground(new java.awt.Color(0, 51, 153));

        javax.swing.GroupLayout jPanel40Layout = new javax.swing.GroupLayout(jPanel40);
        jPanel40.setLayout(jPanel40Layout);
        jPanel40Layout.setHorizontalGroup(
            jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );
        jPanel40Layout.setVerticalGroup(
            jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        jPanel39.add(jPanel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 270, 10));

        dashboard.add(jPanel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 210, 90));

        displayField.addTab("tab1", dashboard);

        rooms.setBackground(new java.awt.Color(245, 245, 245));

        sideBar5.setBackground(new java.awt.Color(245, 245, 245));

        sideBar4.setBackground(new java.awt.Color(245, 245, 245));

        sideBar1.setBackground(new java.awt.Color(245, 245, 245));

        roomsSearch.setForeground(new java.awt.Color(204, 204, 204));
        roomsSearch.setText("Recherche d'une chambre...");
        roomsSearch.setBorder(null);
        roomsSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                roomsSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                roomsSearchFocusLost(evt);
            }
        });
        roomsSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                roomsSearchKeyReleased(evt);
            }
        });
        sideBar1.add(roomsSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 16, 360, 30));

        roomsSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/searchIcon2.png"))); // NOI18N
        roomsSearchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sideBar1.add(roomsSearchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 40, 50));

        roomsSearchBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/roomsSearch.png"))); // NOI18N
        sideBar1.add(roomsSearchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 480, 70));

        sideBar4.add(sideBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 20, 475, -1));

        sideBar2.setBackground(new java.awt.Color(245, 245, 245));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        allRoomsMenu.setForeground(new java.awt.Color(255, 153, 153));
        allRoomsMenu.setText("Toutes les Chambres");
        allRoomsMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        allRoomsMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allRoomsMenuMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(allRoomsMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(allRoomsMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        sideBar2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 150, 30));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        availableRoomsMenu.setText("Chambres libres");
        availableRoomsMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        availableRoomsMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                availableRoomsMenuMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(availableRoomsMenu)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(availableRoomsMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        sideBar2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 140, 30));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        bookedRoomsMenu.setText("Chambres occupées");
        bookedRoomsMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bookedRoomsMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookedRoomsMenuMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(bookedRoomsMenu)
                .addGap(21, 21, 21))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(bookedRoomsMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar2.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, 140, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/roomsMenu4.png"))); // NOI18N
        sideBar2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 560, 70));

        sideBar4.add(sideBar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 549, -1));

        roomsIcon2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomsIcon2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                roomsIcon2MouseEntered(evt);
            }
        });
        sideBar4.add(roomsIcon2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 30, 40, 50));

        roomsIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/addIcon.png"))); // NOI18N
        roomsIcon1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        roomsIcon1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomsIcon1MouseClicked(evt);
            }
        });
        sideBar4.add(roomsIcon1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1047, 36, 50, 40));

        sideBar5.add(sideBar4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1160, 100));

        allRoomsField.setBackground(new java.awt.Color(245, 245, 245));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(null);
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "N°", "Désignation", "Type", "Prix Nuité (Ar)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setBackground(new Color(255, 255, 255));
        jTable1.setGridColor(new java.awt.Color(0, 51, 204));
        jTable1.setRowHeight(40);
        jTable1.setShowHorizontalLines(true);
        jScrollPane1.setViewportView(jTable1);
        //jScrollPane1.getViewport().setOpaque(false);
        jScrollPane1.getViewport().setBackground(new Color(255, 255, 255));
        jTable1.setDefaultRenderer(Object.class, new CenteredTableCellRenderer());

        // Créer une instance de CenteredHeaderRenderer avec la hauteur souhaitée
        int headerHeight = 38;
        Color backgroundColor = new Color(0, 51, 204); // Couleur de fond (SteelBlue)
        Color foregroundColor = Color.WHITE; // Couleur du texte (blanc)
        CenteredHeaderRenderer headerRenderer = new CenteredHeaderRenderer(headerHeight, backgroundColor, foregroundColor);

        // Récupérer le modèle de colonne de la JTable
        TableColumnModel columnModel = jTable1.getColumnModel();

        // Appliquer le rendu de l'en-tête à chaque colonne de la JTable
        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            TableColumn column = columnModel.getColumn(i);
            column.setHeaderRenderer(headerRenderer);
        }

        allRoomsField.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 1070, 480));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("jLabel1");
        jLabel1.setOpaque(true);
        allRoomsField.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 180, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/border.png"))); // NOI18N
        allRoomsField.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 1090, 540));

        roomsDetailsField.addTab("tab1", allRoomsField);

        avalaibleRoomsField.setBackground(new java.awt.Color(245, 245, 245));

        jScrollPane6.setBorder(null);

        avalaibleRoomListTable.setBackground(Color.WHITE);
        avalaibleRoomListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "Désignation", "Type", "Prix Nuité"
            }
        ));
        avalaibleRoomListTable.setGridColor(new java.awt.Color(0, 51, 204));
        avalaibleRoomListTable.setRowHeight(35);
        avalaibleRoomListTable.setShowHorizontalLines(true);
        LocalDate nowDate = LocalDate.now();
        Date stDate = Date.valueOf(nowDate);
        initAvailableRooms(stDate, stDate);
        jScrollPane6.setViewportView(avalaibleRoomListTable);
        jScrollPane6.getViewport().setBackground(new Color(255, 255, 255));
        avalaibleRoomListTable.setDefaultRenderer(Object.class, new CenteredTableCellRenderer());

        // Créer une instance de CenteredHeaderRenderer avec la hauteur souhaitée
        int headerHeight19 = 38;
        Color backgroundColor19 = new Color(0, 51, 204); // Couleur de fond (SteelBlue)
        Color foregroundColor19 = Color.WHITE; // Couleur du texte (blanc)
        CenteredHeaderRenderer headerRenderer19 = new CenteredHeaderRenderer(headerHeight19, backgroundColor19, foregroundColor19);

        // Récupérer le modèle de colonne de la JTable
        TableColumnModel columnModel19 = avalaibleRoomListTable.getColumnModel();

        // Appliquer le rendu de l'en-tête à chaque colonne de la JTable
        for (int i = 0; i < columnModel19.getColumnCount(); i++) {
            TableColumn column = columnModel19.getColumn(i);
            column.setHeaderRenderer(headerRenderer19);
        }

        avalaibleRoomsField.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 1060, 490));

        startDateChooser.setDateFormatString("dd / MM / yyyy");
        startDateChooser.setDate(new  java.util.Date());
        avalaibleRoomsField.add(startDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 60, 150, -1));
        // Ajouter un PropertyChangeListener pour détecter les changements de date
        startDateChooser.getDateEditor().addPropertyChangeListener("date", new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                java.util.Date limit = startDateChooser.getDate();

                // Créer un calendrier et définir la date à 'limit'
                Calendar calendar = Calendar.getInstance();
                calendar.setTime(limit);

                // Ajouter un jour à la date
                calendar.add(Calendar.DATE, 1);

                // Obtenir la nouvelle date
                java.util.Date ext = calendar.getTime();
                initAvailableRooms(DateConvert.convertUtilDateToSqlDate(limit), DateConvert.convertUtilDateToSqlDate(ext));
            }
        });

        filterAvailableRooms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N°", "Désignation", "Type" }));
        avalaibleRoomsField.add(filterAvailableRooms, new org.netbeans.lib.awtextra.AbsoluteConstraints(942, 60, 130, -1));

        roomsDetailsField.addTab("tab2", avalaibleRoomsField);
        roomsDetailsField.addTab("tab3", bookedRoomsField);

        sideBar5.add(roomsDetailsField, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 1130, 670));

        javax.swing.GroupLayout roomsLayout = new javax.swing.GroupLayout(rooms);
        rooms.setLayout(roomsLayout);
        roomsLayout.setHorizontalGroup(
            roomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sideBar5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        roomsLayout.setVerticalGroup(
            roomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomsLayout.createSequentialGroup()
                .addComponent(sideBar5, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
                .addContainerGap())
        );

        displayField.addTab("tab2", rooms);

        booking.setBackground(new java.awt.Color(245, 245, 245));

        sideBar3.setBackground(new java.awt.Color(245, 245, 245));

        jPanel8.setBackground(new java.awt.Color(245, 245, 245));
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel11MouseClicked(evt);
            }
        });
        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 51, 204));
        jLabel7.setText("Listes");
        jPanel11.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 40, 30));

        jPanel8.add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 10, 90, 30));

        jPanel21.setBackground(new java.awt.Color(0, 51, 204));
        jPanel21.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel21MouseClicked(evt);
            }
        });
        jPanel21.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel29.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("Formulaire");
        jPanel21.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 70, 30));

        jPanel8.add(jPanel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 10, 90, 30));

        fieldBookingTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        fieldBookingTitle.setForeground(new java.awt.Color(0, 102, 102));
        fieldBookingTitle.setText("Enregistrement des réservations");
        jPanel8.add(fieldBookingTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 300, 30));

        sideBar3.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1180, 60));

        jPanel6.setBackground(new java.awt.Color(245, 245, 245));

        sideBar6.setBackground(new java.awt.Color(245, 245, 245));

        visitDuration.setText("0");
        visitDuration.setBorder(null);
        visitDuration.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                visitDurationFocusGained(evt);
            }
        });
        visitDuration.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                visitDurationKeyReleased(evt);
            }
        });
        sideBar8.add(visitDuration, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));
        // Obtenir le Document du JTextField
        PlainDocument doc2 = (PlainDocument) visitDuration.getDocument();

        // Ajouter un DocumentFilter pour restreindre les entrées à des chiffres seulement
        doc2.setDocumentFilter(new NumericDocumentFilter());

        jPanel16.setBackground(new java.awt.Color(255, 255, 255));

        jLabel21.setForeground(new java.awt.Color(102, 0, 51));
        jLabel21.setText("Durée");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar8.add(jPanel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 50, 20));

        jLabel22.setBackground(new java.awt.Color(255, 255, 255));
        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar8.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        sideBar6.add(sideBar8, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, 250, 50));

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jLabel11.setForeground(new java.awt.Color(102, 0, 51));
        jLabel11.setText("Prénoms");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addContainerGap(7, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar10.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 60, 20));

        customerFirstName.setForeground(new java.awt.Color(204, 204, 204));
        customerFirstName.setText("Prénoms");
        customerFirstName.setBorder(null);
        customerFirstName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerFirstNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerFirstNameFocusLost(evt);
            }
        });
        sideBar10.add(customerFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar10.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        sideBar6.add(sideBar10, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 20, 250, 50));

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));

        jLabel15.setForeground(new java.awt.Color(102, 0, 51));
        jLabel15.setText("Mail");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        sideBar11.add(jPanel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 30, -1));

        customerEmail.setForeground(new java.awt.Color(204, 204, 204));
        customerEmail.setText("Mail");
        customerEmail.setBorder(null);
        customerEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerEmailFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerEmailFocusLost(evt);
            }
        });
        sideBar11.add(customerEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar11.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        sideBar6.add(sideBar11, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 20, 250, 50));

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));

        jLabel13.setForeground(new java.awt.Color(102, 0, 51));
        jLabel13.setText("Nom");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar12.add(jPanel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 40, 20));

        customerSurname.setForeground(new java.awt.Color(204, 204, 204));
        customerSurname.setText("Nom");
        customerSurname.setBorder(null);
        customerSurname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerSurnameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerSurnameFocusLost(evt);
            }
        });
        ((AbstractDocument) customerSurname.getDocument()).setDocumentFilter(new UppercaseDocumentFilter());
        sideBar12.add(customerSurname, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar12.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        sideBar6.add(sideBar12, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 240, 50));

        bookingDate.setBorder(null);
        bookingDate.setFocusable(false);
        sideBar14.add(bookingDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));

        jLabel17.setForeground(new java.awt.Color(102, 0, 51));
        jLabel17.setText("Date de réservation");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar14.add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 120, 20));

        jLabel18.setBackground(new java.awt.Color(255, 255, 255));
        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar14.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        sideBar6.add(sideBar14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 250, 50));

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));

        jLabel19.setForeground(new java.awt.Color(102, 0, 51));
        jLabel19.setText("Date d'entrée");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar15.add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 80, 20));

        inputDate.setBackground(new java.awt.Color(255, 255, 255));
        sideBar15.add(inputDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));
        inputDate.setDateFormatString("dd / MM / yyyy");
        // Définir la date minimum (aujourd'hui)
        inputDate.setMinSelectableDate(new java.util.Date());

        // Ajouter un PropertyChangeListener pour détecter les changements de date
        inputDate.getDateEditor().addPropertyChangeListener("date", new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                // Récupérer la nouvelle date sélectionnée
                java.util.Date selectedDate1 = inputDate.getDate();
                if (!visitDuration.getText().equals("")) {
                    try {
                        int dayNumber = Integer.parseInt(visitDuration.getText());
                        if (dayNumber > 0) {
                            // Ajouter le nombre de jours à la date
                            Calendar calendar = Calendar.getInstance();
                            calendar.setTime(selectedDate1);
                            calendar.add(Calendar.DAY_OF_MONTH, dayNumber);
                            java.util.Date resultDate = calendar.getTime();
                            outputDate.setForeground(new Color(0, 0, 0));
                            outputDate.setText(sdf.format(resultDate));
                        }

                    } catch (NumberFormatException e) {
                    }
                }
            }
        });

        jLabel20.setBackground(new java.awt.Color(255, 255, 255));
        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar15.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        sideBar6.add(sideBar15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 250, 50));

        outputDate.setForeground(new java.awt.Color(204, 204, 204));
        outputDate.setText("Date de sortie");
        outputDate.setBorder(null);
        outputDate.setFocusable(false);
        sideBar9.add(outputDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));
        outputDate.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                textChanged();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                textChanged();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                textChanged();
            }

            // Méthode appelée lorsque le texte change
            private void textChanged() {
                SwingUtilities.invokeLater(() -> {
                    String text = outputDate.getText();
                    if (!text.equals("Date de sortie")) {
                        java.util.Date inDate = inputDate.getDate();
                        if (inDate != null) {
                            java.sql.Date enterDate = new java.sql.Date(inDate.getTime());
                            try {
                                java.util.Date tmpDate = sdf.parse(text);
                                java.sql.Date exitDate = new java.sql.Date(tmpDate.getTime());
                                displayAvailableBookingRooms(enterDate, exitDate, avalaibleRoomsBookingTable);
                            } catch (ParseException ex) {
                                // Gérer l'erreur de parsing de la date ici
                                ex.printStackTrace();
                            }
                        }
                    }
                });
            }

        });

        jPanel17.setBackground(new java.awt.Color(255, 255, 255));

        jLabel23.setForeground(new java.awt.Color(102, 0, 51));
        jLabel23.setText("Date de sortie");

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar9.add(jPanel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 90, 20));

        jLabel24.setBackground(new java.awt.Color(255, 255, 255));
        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar9.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        sideBar6.add(sideBar9, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 100, 250, 50));

        roomsNumber.setForeground(new java.awt.Color(204, 204, 204));
        roomsNumber.setText("Séléctionner dans le tableau");
        roomsNumber.setBorder(null);
        roomsNumber.setFocusable(false);
        sideBar13.add(roomsNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 210, 30));

        jPanel18.setBackground(new java.awt.Color(255, 255, 255));

        jLabel25.setForeground(new java.awt.Color(102, 0, 51));
        jLabel25.setText("N° Chambre");

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar13.add(jPanel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 80, 20));

        jLabel26.setBackground(new java.awt.Color(255, 255, 255));
        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar13.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 260, 50));

        sideBar6.add(sideBar13, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 100, 240, 50));

        saveBooking.setBackground(new java.awt.Color(102, 153, 255));
        saveBooking.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveBooking.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveBookingMouseClicked(evt);
            }
        });
        saveBooking.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(102, 102, 102));
        jLabel10.setText("Valider");
        saveBooking.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 0, -1, 30));

        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/colorBackground.png"))); // NOI18N
        saveBooking.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, 30));

        sideBar6.add(saveBooking, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 80, 30));

        test.setForeground(new java.awt.Color(204, 0, 0));
        test.setText("Veuillez remplir tous les champs");
        test.setVisible(false);
        sideBar6.add(test, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, 220, 30));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingFormField.png"))); // NOI18N
        sideBar6.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, -4, 1130, 220));

        sideBar7.setBackground(new java.awt.Color(245, 245, 245));

        jScrollPane2.setBorder(null);

        avalaibleRoomsBookingTable.setBackground(new Color(255, 255, 255));
        avalaibleRoomsBookingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "N°", "Désignation", "Type", "Prix Nuité (Ar)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        avalaibleRoomsBookingTable.setGridColor(new java.awt.Color(0, 51, 204));
        avalaibleRoomsBookingTable.setRowHeight(35);
        avalaibleRoomsBookingTable.setShowHorizontalLines(true);
        jScrollPane2.setViewportView(avalaibleRoomsBookingTable);
        //jScrollPane1.getViewport().setOpaque(false);
        jScrollPane2.getViewport().setBackground(new Color(255, 255, 255));
        avalaibleRoomsBookingTable.setDefaultRenderer(Object.class, new CenteredTableCellRenderer());

        // Créer une instance de CenteredHeaderRenderer avec la hauteur souhaitée
        int headerHeight2 = 35;
        Color backgroundColor2 = new Color(0, 51, 204); // Couleur de fond (SteelBlue)
        Color foregroundColor2 = Color.WHITE; // Couleur du texte (blanc)
        CenteredHeaderRenderer headerRenderer2 = new CenteredHeaderRenderer(headerHeight2, backgroundColor2, foregroundColor2);

        // Récupérer le modèle de colonne de la JTable
        TableColumnModel columnModel2 = avalaibleRoomsBookingTable.getColumnModel();

        // Appliquer le rendu de l'en-tête à chaque colonne de la JTable
        for (int i = 0; i < columnModel2.getColumnCount(); i++) {
            TableColumn column = columnModel2.getColumn(i);
            column.setHeaderRenderer(headerRenderer2);
        }

        sideBar7.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 70, 1130, 290));

        jPanel22.setBackground(new java.awt.Color(245, 245, 245));
        jPanel22.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchBookRooms.setForeground(new java.awt.Color(204, 204, 204));
        searchBookRooms.setText("Rechercher une chambre");
        searchBookRooms.setBorder(null);
        searchBookRooms.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchBookRoomsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchBookRoomsFocusLost(evt);
            }
        });
        searchBookRooms.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchBookRoomsKeyReleased(evt);
            }
        });
        jPanel22.add(searchBookRooms, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 230, 20));
        jPanel22.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, 30, 20));

        jLabel57.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookedRoomsSearch.png"))); // NOI18N
        jPanel22.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 280, 40));

        sideBar7.add(jPanel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 280, 40));

        filterBooking.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N°", "Désignation", "Type" }));
        sideBar7.add(filterBooking, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 10, 180, 30));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(sideBar6, javax.swing.GroupLayout.PREFERRED_SIZE, 1128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
            .addComponent(sideBar7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sideBar6, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sideBar7, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                .addContainerGap())
        );

        bookingFields.addTab("tab1", jPanel6);

        jPanel7.setBackground(new java.awt.Color(245, 245, 245));

        sideBar16.setBackground(new java.awt.Color(245, 245, 245));

        jScrollPane3.setBorder(null);

        bookedRoomsTable.setBackground(new Color(255, 255, 255));
        bookedRoomsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Noms", "Mail", "Réservé le", "Entrée le", "Sortie le", "Durée (en jours)", "Chambres"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        bookedRoomsTable.setGridColor(new java.awt.Color(0, 51, 204));
        bookedRoomsTable.setRowHeight(40);
        bookedRoomsTable.setShowHorizontalLines(true);
        jScrollPane3.setViewportView(bookedRoomsTable);
        //jScrollPane1.getViewport().setOpaque(false);
        jScrollPane3.getViewport().setBackground(new Color(255, 255, 255));
        bookedRoomsTable.setDefaultRenderer(Object.class, new CenteredTableCellRenderer());

        // Créer une instance de CenteredHeaderRenderer avec la hauteur souhaitée
        int headerHeight3 = 38;
        Color backgroundColor3 = new Color(0, 51, 204); // Couleur de fond (SteelBlue)
        Color foregroundColor3 = Color.WHITE; // Couleur du texte (blanc)
        CenteredHeaderRenderer headerRenderer3 = new CenteredHeaderRenderer(headerHeight3, backgroundColor3, foregroundColor3);

        // Récupérer le modèle de colonne de la JTable
        TableColumnModel columnModel3 = bookedRoomsTable.getColumnModel();

        // Appliquer le rendu de l'en-tête à chaque colonne de la JTable
        for (int i = 0; i < 8/*columnModel.getColumnCount()*/; i++) {
            TableColumn column = columnModel3.getColumn(i);
            column.setHeaderRenderer(headerRenderer3);
        }
        /*TableColumn firstColumn = columnModel3.getColumn(0);
        firstColumn.setPreferredWidth(0);*/

        sideBar16.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 1110, 480));

        jPanel20.setBackground(new java.awt.Color(245, 245, 245));
        jPanel20.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel20MouseClicked(evt);
            }
        });
        jPanel20.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nameCustomer.setForeground(new java.awt.Color(204, 204, 204));
        nameCustomer.setText("Rechercher un client...");
        nameCustomer.setBorder(null);
        nameCustomer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nameCustomerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nameCustomerFocusLost(evt);
            }
        });
        nameCustomer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameCustomerKeyReleased(evt);
            }
        });
        jPanel20.add(nameCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 240, 30));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookedRoomsSearch.png"))); // NOI18N
        jPanel20.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 290, 30));

        jDateChooser1.setDateFormatString("dd / MM / yyyy");

        jLabel28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/reload2.png"))); // NOI18N
        jLabel28.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel28.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel28MouseClicked(evt);
            }
        });

        jPanel10.setBackground(new java.awt.Color(245, 245, 245));

        editBooking.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/editIcon.png"))); // NOI18N
        editBooking.setVisible(false);
        editBooking.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editBookingMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                editBookingMouseEntered(evt);
            }
        });

        deleteBooking.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/deleteIcon.png"))); // NOI18N
        deleteBooking.setVisible(false);
        deleteBooking.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteBookingMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteBookingMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addComponent(editBooking)
                .addGap(18, 18, 18)
                .addComponent(deleteBooking)
                .addGap(16, 16, 16))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deleteBooking, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(editBooking, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sideBar16, javax.swing.GroupLayout.DEFAULT_SIZE, 1180, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(sideBar16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
        );

        // Définir la date minimum (aujourd'hui)
        jDateChooser1.setMinSelectableDate(new java.util.Date());

        // Ajouter un PropertyChangeListener pour détecter les changements de date
        jDateChooser1.getDateEditor().addPropertyChangeListener("date", new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                java.util.Date tmpDate = jDateChooser1.getDate();
                if (!tmpDate.equals(null)) {
                    Date date = DateConvert.convertUtilDateToSqlDate(tmpDate);
                    if (!nameCustomer.getText().equals("Rechercher un client...")) {
                        displayBookedRooms(date, nameCustomer.getText());
                    } else {
                        displayBookedRooms(date, bookedRoomsTable);
                        System.out.println("Date not null and name null");
                    }
                } else {
                    if (!nameCustomer.getText().equals("Rechercher un client...")) {
                        displayBookedRooms("search", nameCustomer.getText());
                    } else {
                        displayBookedRooms("init", "null");
                    }
                    System.out.println("Date null");
                }
            }
        });

        bookingFields.addTab("tab2", jPanel7);

        sideBar3.add(bookingFields, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 1180, 670));

        javax.swing.GroupLayout bookingLayout = new javax.swing.GroupLayout(booking);
        booking.setLayout(bookingLayout);
        bookingLayout.setHorizontalGroup(
            bookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookingLayout.createSequentialGroup()
                .addComponent(sideBar3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        bookingLayout.setVerticalGroup(
            bookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sideBar3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        displayField.addTab("tab3", booking);

        visit.setBackground(new java.awt.Color(245, 245, 245));

        sideBar17.setBackground(new java.awt.Color(245, 245, 245));

        visitForm.setBackground(new java.awt.Color(245, 245, 245));

        outputDate2.setForeground(new java.awt.Color(204, 204, 204));
        outputDate2.setText("Date de sortie");
        outputDate2.setBorder(null);
        outputDate2.setFocusable(false);
        sideBar23.add(outputDate2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));
        outputDate2.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                textChanged();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                textChanged();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                textChanged();
            }

            // Méthode appelée lorsque le texte change
            private void textChanged() {
                SwingUtilities.invokeLater(() -> {
                    String text = outputDate2.getText();
                    String t = (String) jComboBox3.getSelectedItem();
                    if (t.equals("Listes de chambres")) {
                        if (!text.equals("Date de sortie")) {
                            try {
                                java.util.Date inDate = sdf.parse(inputDate2.getText());
                                java.sql.Date enterDate = new java.sql.Date(inDate.getTime());
                                java.util.Date tmpDate = sdf.parse(text);
                                java.sql.Date exitDate = new java.sql.Date(tmpDate.getTime());
                                displayAvailableBookingRoomsVisit(enterDate, exitDate, availableRoomsTable);
                            } catch (ParseException ex) {
                                // Gérer l'erreur de parsing de la date ici
                                ex.printStackTrace();
                            }
                        }
                    }
                });
            }

        });

        jPanel28.setBackground(new java.awt.Color(255, 255, 255));

        jLabel40.setForeground(new java.awt.Color(102, 0, 51));
        jLabel40.setText("Date de sortie");

        javax.swing.GroupLayout jPanel28Layout = new javax.swing.GroupLayout(jPanel28);
        jPanel28.setLayout(jPanel28Layout);
        jPanel28Layout.setHorizontalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel28Layout.setVerticalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar23.add(jPanel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 90, 20));

        jLabel41.setBackground(new java.awt.Color(255, 255, 255));
        jLabel41.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar23.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        visitForm.add(sideBar23, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 150, 250, -1));

        visitDuration2.setText("0");
        visitDuration2.setBorder(null);
        // Obtenir le Document du JTextField
        PlainDocument doc3 = (PlainDocument) visitDuration2.getDocument();
        // Ajouter un DocumentFilter pour restreindre les entrées à des chiffres seulement
        doc3.setDocumentFilter(new NumericDocumentFilter());
        visitDuration2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                visitDuration2KeyReleased(evt);
            }
        });
        sideBar22.add(visitDuration2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));

        jPanel27.setBackground(new java.awt.Color(255, 255, 255));

        jLabel38.setForeground(new java.awt.Color(102, 0, 51));
        jLabel38.setText("Durée");

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar22.add(jPanel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 50, 20));

        jLabel39.setBackground(new java.awt.Color(255, 255, 255));
        jLabel39.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar22.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        visitForm.add(sideBar22, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 150, 250, -1));

        roomsNb2.setForeground(new java.awt.Color(204, 204, 204));
        roomsNb2.setText("Séléctionner dans le tableau");
        roomsNb2.setBorder(null);
        roomsNb2.setFocusable(false);
        sideBar24.add(roomsNb2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));
        roomsNb2.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                textChanged();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                textChanged();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                textChanged();
            }

            // Méthode appelée lorsque le texte change
            private void textChanged() {
                SwingUtilities.invokeLater(() -> {
                    String text = roomsNb2.getText();
                    // String t = (String) jComboBox3.getSelectedItem();
                    // if (t.equals("Listes de chambres")) {
                        if (!text.equals("Séléctionner dans le tableau")) {
                            String[] rooms = text.split(", ");
                            String count = String.valueOf(rooms.length);
                            roomsCount.setText(count);
                        } else {
                            roomsCount.setText("0");
                        }
                        // }
                });
            }
        });

        jPanel29.setBackground(new java.awt.Color(255, 255, 255));

        jLabel42.setForeground(new java.awt.Color(102, 0, 51));
        jLabel42.setText("N° Chambre");

        javax.swing.GroupLayout jPanel29Layout = new javax.swing.GroupLayout(jPanel29);
        jPanel29.setLayout(jPanel29Layout);
        jPanel29Layout.setHorizontalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel29Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel29Layout.setVerticalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel29Layout.createSequentialGroup()
                .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar24.add(jPanel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 80, 20));

        jLabel43.setBackground(new java.awt.Color(255, 255, 255));
        jLabel43.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar24.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        visitForm.add(sideBar24, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, 250, -1));

        jPanel26.setBackground(new java.awt.Color(255, 255, 255));

        jLabel36.setForeground(new java.awt.Color(102, 0, 51));
        jLabel36.setText("Date d'entrée");

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar21.add(jPanel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 90, 20));

        inputDate2.setBorder(null);
        inputDate2.setFocusable(false);
        LocalDate currentDate = LocalDate.now();
        Date startDate = Date.valueOf(currentDate);
        inputDate2.setText(sdf.format(startDate));
        sideBar21.add(inputDate2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 200, -1));

        jLabel37.setBackground(new java.awt.Color(255, 255, 255));
        jLabel37.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar21.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        visitForm.add(sideBar21, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 250, -1));

        customerPhone.setForeground(new java.awt.Color(204, 204, 204));
        customerPhone.setText("Téléphone");
        customerPhone.setBorder(null);
        customerPhone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerPhoneFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerPhoneFocusLost(evt);
            }
        });
        sideBar20.add(customerPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));

        jPanel25.setBackground(new java.awt.Color(255, 255, 255));

        phoneLabel.setForeground(new java.awt.Color(102, 0, 51));
        phoneLabel.setText("Téléphone");

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(phoneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addComponent(phoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar20.add(jPanel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 70, 20));

        jLabel35.setBackground(new java.awt.Color(255, 255, 255));
        jLabel35.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar20.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        visitForm.add(sideBar20, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 80, 250, -1));

        customerFirstName2.setForeground(new java.awt.Color(204, 204, 204));
        customerFirstName2.setText("Prénoms");
        customerFirstName2.setBorder(null);
        customerFirstName2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerFirstName2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerFirstName2FocusLost(evt);
            }
        });
        sideBar19.add(customerFirstName2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));

        jPanel24.setBackground(new java.awt.Color(255, 255, 255));

        jLabel32.setForeground(new java.awt.Color(102, 0, 51));
        jLabel32.setText("Prénoms");

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar19.add(jPanel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 60, 20));

        jLabel33.setBackground(new java.awt.Color(255, 255, 255));
        jLabel33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar19.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        visitForm.add(sideBar19, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 80, 250, -1));

        customerSurname2.setForeground(new java.awt.Color(204, 204, 204));
        customerSurname2.setText("NOM");
        customerSurname2.setBorder(null);
        customerSurname2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerSurname2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerSurname2FocusLost(evt);
            }
        });
        ((AbstractDocument) customerSurname2.getDocument()).setDocumentFilter(new UppercaseDocumentFilter());
        sideBar18.add(customerSurname2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));

        jPanel19.setBackground(new java.awt.Color(255, 255, 255));

        jLabel30.setForeground(new java.awt.Color(102, 0, 51));
        jLabel30.setText("Nom");

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar18.add(jPanel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 50, 20));

        jLabel31.setBackground(new java.awt.Color(255, 255, 255));
        jLabel31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar18.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        visitForm.add(sideBar18, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 250, -1));

        visitFormBuuton1.setBackground(new java.awt.Color(0, 51, 204));
        visitFormBuuton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        visitFormBuuton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                visitFormBuuton1MouseClicked(evt);
            }
        });
        visitFormBuuton1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel44.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(255, 255, 255));
        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel44.setText("Formulaire");
        visitFormBuuton1.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 70, 30));

        visitForm.add(visitFormBuuton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 20, 90, 30));

        listFormButton1.setBackground(new java.awt.Color(255, 255, 255));
        listFormButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        listFormButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listFormButton1MouseClicked(evt);
            }
        });
        listFormButton1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 51, 204));
        jLabel12.setText("Listes");
        listFormButton1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 40, 30));

        visitForm.add(listFormButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 20, 90, 30));

        jScrollPane4.setBorder(null);

        availableRoomsTable.setBackground(new Color(255, 255, 255));
        availableRoomsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "N°", "Désignation", "Type", "Prix nuité (Ar)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        availableRoomsTable.setGridColor(new java.awt.Color(0, 51, 204));
        availableRoomsTable.setRowHeight(35);
        availableRoomsTable.setShowHorizontalLines(true);
        jScrollPane4.setViewportView(availableRoomsTable);
        // Obtenir la date d'aujourd'hui
        LocalDate curDate = LocalDate.now();

        // Convertir la date d'aujourd'hui en objet Date
        Date sDate = Date.valueOf(curDate);
        bookingDate.setText(sdf.format(sDate));
        // Définir la date de fin (ici, nous utilisons la même date que la date de début)
        Date eDate = Date.valueOf(curDate);
        displayAvailableBookingRoomsVisit(sDate, eDate, availableRoomsTable);

        //jScrollPane1.getViewport().setOpaque(false);
        jScrollPane4.getViewport().setBackground(new Color(255, 255, 255));
        availableRoomsTable.setDefaultRenderer(Object.class, new CenteredTableCellRenderer());

        // Créer une instance de CenteredHeaderRenderer avec la hauteur souhaitée
        int headerHeight4 = 35;
        Color backgroundColor4 = new Color(0, 51, 204); // Couleur de fond (SteelBlue)
        Color foregroundColor4 = Color.WHITE; // Couleur du texte (blanc)
        CenteredHeaderRenderer headerRenderer4 = new CenteredHeaderRenderer(headerHeight4, backgroundColor4, foregroundColor4);

        // Récupérer le modèle de colonne de la JTable
        TableColumnModel columnModel4 = availableRoomsTable.getColumnModel();

        // Appliquer le rendu de l'en-tête à chaque colonne de la JTable
        for (int i = 0; i < columnModel4.getColumnCount(); i++) {
            TableColumn column = columnModel4.getColumn(i);
            column.setHeaderRenderer(headerRenderer4);
        }

        visitForm.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, 1130, 300));

        roomsCount.setText("0");
        roomsCount.setBorder(null);
        roomsCount.setFocusable(false);
        sideBar25.add(roomsCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));

        jPanel30.setBackground(new java.awt.Color(255, 255, 255));

        jLabel46.setForeground(new java.awt.Color(102, 0, 51));
        jLabel46.setText("Nombre de chambre");

        javax.swing.GroupLayout jPanel30Layout = new javax.swing.GroupLayout(jPanel30);
        jPanel30.setLayout(jPanel30Layout);
        jPanel30Layout.setHorizontalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel46, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel30Layout.setVerticalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar25.add(jPanel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 120, 20));

        jLabel49.setBackground(new java.awt.Color(255, 255, 255));
        jLabel49.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar25.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        visitForm.add(sideBar25, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 220, 250, -1));

        jPanel31.setBackground(new java.awt.Color(255, 255, 255));

        jLabel50.setForeground(new java.awt.Color(102, 0, 51));
        jLabel50.setText("Total à payer");

        javax.swing.GroupLayout jPanel31Layout = new javax.swing.GroupLayout(jPanel31);
        jPanel31.setLayout(jPanel31Layout);
        jPanel31Layout.setHorizontalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel31Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel50, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel31Layout.setVerticalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel31Layout.createSequentialGroup()
                .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar26.add(jPanel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 80, 20));

        total.setText("0");
        total.setBorder(null);
        total.setFocusable(false);
        sideBar26.add(total, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 170, 30));

        jLabel52.setText("Ar");
        sideBar26.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(213, 6, 20, 40));

        jLabel51.setBackground(new java.awt.Color(255, 255, 255));
        jLabel51.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar26.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        visitForm.add(sideBar26, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 220, 250, -1));

        saveVisitButton.setBackground(new java.awt.Color(255, 255, 255));
        saveVisitButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveVisitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveVisitButtonMouseClicked(evt);
            }
        });
        saveVisitButton.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel54.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel54.setForeground(new java.awt.Color(102, 102, 102));
        jLabel54.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel54.setText("Valider");
        jLabel54.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveVisitButton.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 60, 30));

        jLabel53.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/colorBackground.png"))); // NOI18N
        saveVisitButton.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 80, 30));

        visitForm.add(saveVisitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, 90, 30));

        errorMessage2.setVisible(false);
        errorMessage2.setForeground(new java.awt.Color(204, 0, 0));
        errorMessage2.setText("Veuillez remplir tous les champs");
        visitForm.add(errorMessage2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 290, 180, -1));

        jLabel45.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/visitB.png"))); // NOI18N
        visitForm.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 1140, 280));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Listes de chambres", "Liste des réservations" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        visitForm.add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 160, 30));

        visitListTitle1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        visitListTitle1.setForeground(new java.awt.Color(0, 102, 102));
        visitListTitle1.setText("Enregistrement de séjour");
        visitForm.add(visitListTitle1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 220, 30));

        visitField.addTab("tab1", visitForm);

        visitList.setBackground(new java.awt.Color(245, 245, 245));

        visitFormBuuton2.setBackground(new java.awt.Color(0, 51, 204));
        visitFormBuuton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        visitFormBuuton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                visitFormBuuton2MouseClicked(evt);
            }
        });
        visitFormBuuton2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel47.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel47.setForeground(new java.awt.Color(255, 255, 255));
        jLabel47.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel47.setText("Formulaire");
        visitFormBuuton2.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 70, 30));

        visitList.add(visitFormBuuton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 20, 90, 30));

        listFormButton3.setBackground(new java.awt.Color(255, 255, 255));
        listFormButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        listFormButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listFormButton3MouseClicked(evt);
            }
        });
        listFormButton3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel48.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(0, 51, 204));
        jLabel48.setText("Listes");
        listFormButton3.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 40, 30));

        visitList.add(listFormButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 20, 90, 30));

        jScrollPane5.setBorder(null);

        visitListTable.setBackground(Color.WHITE);
        visitListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Noms", "Téléphone", "Entrée le", "Sortie le", "Durée (en jours)", "Chambres"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        visitListTable.setGridColor(new java.awt.Color(0, 51, 204));
        visitListTable.setRowHeight(35);
        visitListTable.setShowHorizontalLines(true);
        displayVisitList("Liste des séjournants");
        jScrollPane5.setViewportView(visitListTable);
        jScrollPane5.getViewport().setBackground(new Color(255, 255, 255));
        visitListTable.setDefaultRenderer(Object.class, new CenteredTableCellRenderer());

        // Créer une instance de CenteredHeaderRenderer avec la hauteur souhaitée
        int headerHeight8 = 35;
        Color backgroundColor8 = new Color(0, 51, 204); // Couleur de fond (SteelBlue)
        Color foregroundColor8 = Color.WHITE; // Couleur du texte (blanc)
        CenteredHeaderRenderer headerRenderer8 = new CenteredHeaderRenderer(headerHeight8, backgroundColor8, foregroundColor8);

        // Récupérer le modèle de colonne de la JTable
        TableColumnModel columnModel8 = visitListTable.getColumnModel();

        // Appliquer le rendu de l'en-tête à chaque colonne de la JTable
        for (int i = 0; i < columnModel8.getColumnCount(); i++) {
            TableColumn column = columnModel8.getColumn(i);
            column.setHeaderRenderer(headerRenderer8);
        }

        visitList.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 107, 1120, 540));

        visitListTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        visitListTitle.setForeground(new java.awt.Color(0, 102, 102));
        visitListTitle.setText("Liste des séjournants");
        visitList.add(visitListTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 230, 30));

        jPanel32.setBackground(new java.awt.Color(245, 245, 245));
        jPanel32.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField2.setForeground(new java.awt.Color(204, 204, 204));
        jTextField2.setText("Rechercher...");
        jTextField2.setBorder(null);
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField2FocusLost(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
        });
        jPanel32.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 240, 30));

        jLabel56.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookedRoomsSearch.png"))); // NOI18N
        jPanel32.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 280, 30));

        visitList.add(jPanel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 280, 30));

        visitListComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Séjournants", "Arrivés" }));
        visitListComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visitListComboBoxActionPerformed(evt);
            }
        });
        visitList.add(visitListComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 60, 110, 30));

        deleteVisitList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/deleteIcon.png"))); // NOI18N
        deleteVisitList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteVisitList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteVisitListMouseClicked(evt);
            }
        });
        visitList.add(deleteVisitList, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 60, -1, 40));
        deleteVisitList.setVisible(false);

        editVisitList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/editIcon.png"))); // NOI18N
        editVisitList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        editVisitList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editVisitListMouseClicked(evt);
            }
        });
        visitList.add(editVisitList, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 60, 30, 40));
        editVisitList.setVisible(false);

        visitField.addTab("tab2", visitList);

        sideBar17.add(visitField, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -40, 1180, 730));

        javax.swing.GroupLayout visitLayout = new javax.swing.GroupLayout(visit);
        visit.setLayout(visitLayout);
        visitLayout.setHorizontalGroup(
            visitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(visitLayout.createSequentialGroup()
                .addComponent(sideBar17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        visitLayout.setVerticalGroup(
            visitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, visitLayout.createSequentialGroup()
                .addComponent(sideBar17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        displayField.addTab("tab4", visit);

        jPanel1.add(displayField, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 1180, 730));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 770));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generalSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_generalSearchFocusGained
        removePlaceholder(generalSearch);
    }//GEN-LAST:event_generalSearchFocusGained

    private void dashboardMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dashboardMenuMouseClicked
        displayField.setSelectedIndex(0);
        displayTitle.setText("Dashboard");
        dashboardMenu.setBackground(new Color(0, 51, 204));
        dashboardLabel.setForeground(new Color(255, 255, 255));
        dashboardIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/dashboardWhite.png")));
        if (dashboardMenu.getBackground().equals(roomsMenu.getBackground())) {
            roomsIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/rooms.png")));
            roomsLabel.setForeground(new Color(153, 153, 153));
            roomsMenu.setBackground(new Color(255, 255, 255));
        } else if (dashboardMenu.getBackground().equals(bookingMenu.getBackground())) {
            bookingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/booking.png")));
            bookingLabel.setForeground(new Color(153, 153, 153));
            bookingMenu.setBackground(new Color(255, 255, 255));
        } else {
            visitIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/visit.png")));
            visitLabel.setForeground(new Color(153, 153, 153));
            visitMenu.setBackground(new Color(255, 255, 255));
        }
        
        roomsTotal.setText(String.valueOf(RoomsCount.roomsCount()));
        LocalDate today = LocalDate.now();
        Date todayDate = Date.valueOf(today);
        roomsAvailable.setText(String.valueOf(AvailableRoomsCount.availableRoomsCount(todayDate, todayDate)));
        roomsTaken.setText(String.valueOf(Integer.parseInt(roomsTotal.getText()) - Integer.parseInt(roomsAvailable.getText())));
        // Supprimer l'ancien chart
        jPanel38.removeAll();

        // Créer et ajouter le nouveau chart
        DonutChartPanel donutChartPanel = new DonutChartPanel(
                Integer.parseInt(roomsAvailable.getText()),
                Integer.parseInt(roomsTaken.getText())
        );
        jPanel38.add(donutChartPanel, BorderLayout.CENTER);

        // Valider et redessiner le panneau
        jPanel38.revalidate();
        jPanel38.repaint();
        balance.setText(SelectBalance.selectBalance() + " Ar");
    }//GEN-LAST:event_dashboardMenuMouseClicked

    private void roomsMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomsMenuMouseClicked
        displayField.setSelectedIndex(1);
        displayTitle.setText("Chambres");
        roomsMenu.setBackground(new Color(0, 51, 204));
        roomsLabel.setForeground(new Color(255, 255, 255));
        roomsIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/roomsWhite.png")));
        if (roomsMenu.getBackground().equals(dashboardMenu.getBackground())) {
            dashboardIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/dashboard.png")));
            dashboardLabel.setForeground(new Color(153, 153, 153));
            dashboardMenu.setBackground(new Color(255, 255, 255));
        } else if (roomsMenu.getBackground().equals(bookingMenu.getBackground())) {
            bookingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/booking.png")));
            bookingLabel.setForeground(new Color(153, 153, 153));
            bookingMenu.setBackground(new Color(255, 255, 255));
        } else {
            visitIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/visit.png")));
            visitLabel.setForeground(new Color(153, 153, 153));
            visitMenu.setBackground(new Color(255, 255, 255));
        }
        displayRooms();
    }//GEN-LAST:event_roomsMenuMouseClicked

    private void bookingMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookingMenuMouseClicked
        displayField.setSelectedIndex(2);
        displayTitle.setText("Réservation");
        bookingMenu.setBackground(new Color(0, 51, 204));
        bookingLabel.setForeground(new Color(255, 255, 255));
        bookingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingWhite.png")));
        if (bookingMenu.getBackground().equals(dashboardMenu.getBackground())) {
            dashboardIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/dashboard.png")));
            dashboardLabel.setForeground(new Color(153, 153, 153));
            dashboardMenu.setBackground(new Color(255, 255, 255));
        } else if (bookingMenu.getBackground().equals(roomsMenu.getBackground())) {
            roomsIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/rooms.png")));
            roomsLabel.setForeground(new Color(153, 153, 153));
            roomsMenu.setBackground(new Color(255, 255, 255));
        } else {
            visitIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/visit.png")));
            visitLabel.setForeground(new Color(153, 153, 153));
            visitMenu.setBackground(new Color(255, 255, 255));
        }
        // Obtenir la date d'aujourd'hui
        LocalDate currentDate = LocalDate.now();

        // Convertir la date d'aujourd'hui en objet Date
        Date startDate = Date.valueOf(currentDate);
        bookingDate.setText(sdf.format(startDate));
        // Définir la date de fin (ici, nous utilisons la même date que la date de début)
        Date endDate = Date.valueOf(currentDate);
        visitDuration.setText("0");
        try {
            inputDate.setDate(null);
        } catch(Exception e) {
            System.out.println(e);
        }
        outputDate.setForeground(new Color(204, 204, 204));
        outputDate.setText("Date de sorite");
        displayAvailableBookingRooms(startDate, endDate, avalaibleRoomsBookingTable);
    }//GEN-LAST:event_bookingMenuMouseClicked

    private void visitMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_visitMenuMouseClicked
        displayField.setSelectedIndex(3);
        displayTitle.setText("Séjour");
        visitMenu.setBackground(new Color(0, 51, 204));
        visitLabel.setForeground(new Color(255, 255, 255));
        visitIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/visitWhite.png")));
        if (visitMenu.getBackground().equals(dashboardMenu.getBackground())) {
            dashboardIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/dashboard.png")));
            dashboardLabel.setForeground(new Color(153, 153, 153));
            dashboardMenu.setBackground(new Color(255, 255, 255));
        } else if (visitMenu.getBackground().equals(roomsMenu.getBackground())) {
            roomsIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/rooms.png")));
            roomsLabel.setForeground(new Color(153, 153, 153));
            roomsMenu.setBackground(new Color(255, 255, 255));
        } else {
            bookingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/booking.png")));
            bookingLabel.setForeground(new Color(153, 153, 153));
            bookingMenu.setBackground(new Color(255, 255, 255));
        }
        String type = (String) jComboBox3.getSelectedItem();
        if (type.equals("Listes de chambres")) {
            LocalDate curDate = LocalDate.now();
            Date sDate = Date.valueOf(curDate);
            Date eDate = Date.valueOf(curDate);
            displayAvailableBookingRoomsVisit(sDate, eDate, availableRoomsTable);
            visitDuration2.setText("0");
            outputDate2.setForeground(new Color(204, 204, 204));
            outputDate2.setText("Date de sortie");
        }
    }//GEN-LAST:event_visitMenuMouseClicked

    private void roomsIcon1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomsIcon1MouseClicked
        if (isIconEqual(roomsIcon1, "/training/Images/addIcon.png")) {
            AddNewRoomField addRoomsField = new AddNewRoomField(this);
            addRoomsField.setVisible(true);
        } else if (isIconEqual(roomsIcon1, "/training/Images/deleteIcon.png")) {
            ArrayList<String> checkedRows = getCheckedValues(jTable1, "delete");
            LocalDate currentDate = LocalDate.now();
            Date startDate = Date.valueOf(currentDate);
            Date endDate = null;
            try {
                endDate = DateConvert.convertStringToSqlDate("31 / 12 / 2050");
            } catch (ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            ArrayList<String[]> listData = AvailableBookingRooms.selectRooms(startDate, endDate);
            boolean available;
            for (String room : checkedRows) {
                available = false;
                for (String[] data : listData) {
                    if (data[0].equals(room)) {
                        available = true;
                        break;
                    }
                }
                if (!available) {
                    JOptionPane.showMessageDialog(null, "Cette chambre est reservée ou occupée et ne peut pas être supprimée", "Erreur", JOptionPane.ERROR_MESSAGE);
                    return;
                }            
            }

            // Afficher une boîte de dialogue de confirmation avec des options personnalisées
            int response = dialogConfirmation();

            // Traiter la réponse de l'utilisateur
            if (response == JOptionPane.OK_OPTION) {
                DeleteRooms.deletetRooms(checkedRows);
                displayRooms();
            }            
        } else {
            ArrayList<String> checkedRows = getCheckedValues(jTable1, "edit");
            String id = checkedRows.get(0);
            EditRoomField.setId(id);
            EditRoomField updateRoomField = new EditRoomField(this);
            updateRoomField.setVisible(true);
        }
    }//GEN-LAST:event_roomsIcon1MouseClicked

    private void allRoomsMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allRoomsMenuMouseClicked
        roomsDetailsField.setSelectedIndex(0);
        allRoomsMenu.setForeground(new Color(255, 153, 153));
        // Charger l'image comme ImageIcon
        roomsIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/addIcon.png")));
        roomsIcon2.setIcon(new javax.swing.ImageIcon(getClass().getResource("")));
        roomsIcon1.setVisible(true);
        roomsIcon2.setVisible(true);
        availableRoomsMenu.setForeground(Color.BLACK);
        bookedRoomsMenu.setForeground(Color.BLACK);
        roomsSearch.setForeground(new Color(204, 204, 204));
        roomsSearch.setText("Recherche d'une chambre...");
    }//GEN-LAST:event_allRoomsMenuMouseClicked

    private void availableRoomsMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_availableRoomsMenuMouseClicked
        roomsDetailsField.setSelectedIndex(1);
        availableRoomsMenu.setForeground(new Color(255, 153, 153));
        roomsIcon1.setVisible(false);
        roomsIcon2.setVisible(false);
        allRoomsMenu.setForeground(Color.BLACK);
        bookedRoomsMenu.setForeground(Color.BLACK);
        java.util.Date limit = startDateChooser.getDate();
        
        // Créer un calendrier et définir la date à 'limit'
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(limit);

        // Ajouter un jour à la date
        calendar.add(Calendar.DATE, 1);

        // Obtenir la nouvelle date
        java.util.Date ext = calendar.getTime();
        initAvailableRooms(DateConvert.convertUtilDateToSqlDate(limit), DateConvert.convertUtilDateToSqlDate(ext));
        roomsSearch.setForeground(new Color(204, 204, 204));
        roomsSearch.setText("Recherche d'une chambre...");
    }//GEN-LAST:event_availableRoomsMenuMouseClicked

    private void bookedRoomsMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookedRoomsMenuMouseClicked
        roomsDetailsField.setSelectedIndex(2);
        bookedRoomsMenu.setForeground(new Color(255, 153, 153));
        roomsIcon1.setVisible(false);
        roomsIcon2.setVisible(false);
        allRoomsMenu.setForeground(Color.BLACK);
        availableRoomsMenu.setForeground(Color.BLACK);
        roomsSearch.setForeground(new Color(204, 204, 204));
        roomsSearch.setText("Recherche d'une chambre...");
    }//GEN-LAST:event_bookedRoomsMenuMouseClicked

    private void roomsIcon2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomsIcon2MouseClicked
        if (isIconEqual(roomsIcon2, "/training/Images/deleteIcon.png")) {
            ArrayList<String> checkedRows = getCheckedValues(jTable1, "delete");
            LocalDate currentDate = LocalDate.now();
            Date startDate = Date.valueOf(currentDate);
            Date endDate = null;
            try {
                endDate = DateConvert.convertStringToSqlDate("31 / 12 / 2050");
            } catch (ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            ArrayList<String[]> listData = AvailableBookingRooms.selectRooms(startDate, endDate);
            boolean available;
            for (String room : checkedRows) {
                available = false;
                for (String[] data : listData) {
                    if (data[0].equals(room)) {
                        available = true;
                        break;
                    }
                }
                if (!available) {
                    JOptionPane.showMessageDialog(null, "Cette chambre est reservée ou occupée et ne peut pas être supprimée", "Erreur", JOptionPane.ERROR_MESSAGE);
                    return;
                }            
            }

            // Afficher une boîte de dialogue de confirmation avec des options personnalisées
            int response = dialogConfirmation();

            // Traiter la réponse de l'utilisateur
            if (response == JOptionPane.OK_OPTION) {
                DeleteRooms.deletetRooms(checkedRows);
                displayRooms();
            }            
        }
    }//GEN-LAST:event_roomsIcon2MouseClicked

    private void roomsIcon2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomsIcon2MouseEntered
        if (isIconEqual(roomsIcon2, "/training/Images/deleteIcon.png")) {
            roomsIcon2.setCursor(new Cursor(Cursor.HAND_CURSOR));
        } else {
            roomsIcon2.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_roomsIcon2MouseEntered

    private void visitDurationKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_visitDurationKeyReleased
        try {
            java.util.Date selectedDate = inputDate.getDate();
            if (selectedDate != null) {
                int dayNumber = Integer.parseInt(visitDuration.getText());
                if (dayNumber > 0) {
                    // Ajouter le nombre de jours à la date
                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(selectedDate);
                    calendar.add(Calendar.DAY_OF_MONTH, dayNumber);
                    java.util.Date resultDate = calendar.getTime();
                    outputDate.setForeground(new Color(0, 0, 0));
                    outputDate.setText(sdf.format(resultDate));
                }
            }
        } catch (NumberFormatException e) {
            outputDate.setForeground(new Color(204, 204, 204));            
            outputDate.setText("Date de sortie");
        }
    }//GEN-LAST:event_visitDurationKeyReleased

    private void customerSurnameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerSurnameFocusGained
        removePlaceholder(customerSurname);
    }//GEN-LAST:event_customerSurnameFocusGained

    private void customerSurnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerSurnameFocusLost
        addPlaceholder(customerSurname, "Nom");
    }//GEN-LAST:event_customerSurnameFocusLost

    private void customerFirstNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerFirstNameFocusGained
        removePlaceholder(customerFirstName);
    }//GEN-LAST:event_customerFirstNameFocusGained

    private void customerFirstNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerFirstNameFocusLost
        addPlaceholder(customerFirstName, "Prénoms");
    }//GEN-LAST:event_customerFirstNameFocusLost

    private void customerEmailFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerEmailFocusGained
        removePlaceholder(customerEmail);
    }//GEN-LAST:event_customerEmailFocusGained

    private void customerEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerEmailFocusLost
        addPlaceholder(customerEmail, "Mail");
    }//GEN-LAST:event_customerEmailFocusLost

    private void visitDurationFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_visitDurationFocusGained
        visitDuration.setForeground(Color.black);
    }//GEN-LAST:event_visitDurationFocusGained

    private void saveBookingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBookingMouseClicked
        Color foregroundColor = new Color(204, 204, 204);
        String tmpBookDate = "";
        String name = "";
        String email = "";
        String tmpExitDate = "";
        String tmpRoomsNb = "";
        if (!bookingDate.getForeground().equals(foregroundColor) && !customerSurname.getForeground().equals(foregroundColor) && !customerFirstName.getForeground().equals(foregroundColor) && !customerEmail.getForeground().equals(foregroundColor) && !outputDate.getForeground().equals(foregroundColor) && !roomsNumber.getForeground().equals(foregroundColor)) {
            tmpBookDate = bookingDate.getText();
            name = customerSurname.getText() + " " + customerFirstName.getText();
            email = customerEmail.getText();
            tmpExitDate = outputDate.getText();
            tmpRoomsNb = roomsNumber.getText();
        }
        java.util.Date tmpEnterDate = inputDate.getDate();
        int dayNumber;
        try {
            dayNumber = Integer.parseInt(visitDuration.getText());
        } catch (NumberFormatException e) {
            dayNumber = 0;
        }

        // Vérification que les données ne sont pas vides
        if (!tmpBookDate.isEmpty() && !tmpRoomsNb.isEmpty() && tmpEnterDate != null && dayNumber > 0 && !name.isEmpty() && !email.isEmpty() && ValidEmailFormat.isValidEmail(email) && !tmpExitDate.isEmpty()) {
            Date bookDate, exitDate, enterDate;
            try {
                bookDate = DateConvert.convertStringToSqlDate(tmpBookDate);
                enterDate = DateConvert.convertUtilDateToSqlDate(tmpEnterDate);
                exitDate = DateConvert.convertStringToSqlDate(tmpExitDate);
                String[] roomsNb = tmpRoomsNb.split(", ");
                Date[] dateInfo = {bookDate, enterDate, exitDate};
                String[] customerInfo = {name, email};
                SaveBooking.saveBooking(dateInfo, roomsNb, customerInfo, dayNumber);
                RegisterTakenRooms.registerTakenRooms(roomsNb.length);
                loadingEmail(email, name, tmpRoomsNb, sdf.format(tmpEnterDate), tmpExitDate, dayNumber);
//                JOptionPane.showMessageDialog(null, "Réservation enregistrée avec succès", "Confirmation", JOptionPane.INFORMATION_MESSAGE);
                resetBookingForm();
            } catch (ParseException e) {
                // Gérez l'erreur de parsing de la date ici
                // Ou affichez un message d'erreur
                
            }
        } else {
            // Afficher un message d'erreur ou prendre une autre action appropriée
            test.setVisible(true);
        }
    }//GEN-LAST:event_saveBookingMouseClicked

    private void loadingEmail(String email, String name, String tmpRoomsNb, String tmpEnterDate, String tmpExitDate, int dayNumber) {
        JDialog loadingDialog = new JDialog(this, "Envoi de l'email", true);
        loadingDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        loadingDialog.setSize(200, 100);
        loadingDialog.setLocationRelativeTo(this);

        JLabel loadingLabel = new JLabel(new javax.swing.ImageIcon(getClass().getResource("/training/Images/loading.gif")));
        loadingDialog.add(loadingLabel, BorderLayout.CENTER);
        loadingDialog.pack();

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                SendMail.sendMail(email, name, tmpRoomsNb, tmpEnterDate, tmpExitDate, dayNumber);
                return null;
            }
            @Override
            protected void done() {
                loadingDialog.dispose();
                JOptionPane.showMessageDialog(null, "Réservation enregistrée avec succès", "Confirmation", JOptionPane.INFORMATION_MESSAGE);
            }
        };
        worker.execute(); 
        loadingDialog.setVisible(true);
    }
    
    private void jPanel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel11MouseClicked
        bookingFields.setSelectedIndex(1);
        try {
            jDateChooser1.setDate(null);
        } catch (Exception e) {
            System.out.println(e);
        }
        displayBookedRooms("init", "null");
        fieldBookingTitle.setText("Liste des réservations");
    }//GEN-LAST:event_jPanel11MouseClicked

    private void jPanel20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel20MouseClicked
        
    }//GEN-LAST:event_jPanel20MouseClicked

    private void jPanel21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel21MouseClicked
        bookingFields.setSelectedIndex(0);
        fieldBookingTitle.setText("Enregistrement des réservations");
        // Obtenir la date d'aujourd'hui
        LocalDate currentDate = LocalDate.now();

        // Convertir la date d'aujourd'hui en objet Date
        Date startDate = Date.valueOf(currentDate);
        bookingDate.setText(sdf.format(startDate));
        // Définir la date de fin (ici, nous utilisons la même date que la date de début)
        Date endDate = Date.valueOf(currentDate);
        visitDuration.setText("0");
        try {
            inputDate.setDate(null);
        } catch(Exception e) {
            System.out.println(e);
        }       
        outputDate.setForeground(new Color(204, 204, 204));
        outputDate.setText("Date de sorite");
        displayAvailableBookingRooms(startDate, endDate, avalaibleRoomsBookingTable);
    }//GEN-LAST:event_jPanel21MouseClicked

    private void nameCustomerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameCustomerKeyReleased
        String name = nameCustomer.getText();
        if (!name.equals("")) {
            if (jDateChooser1.getDate() != null) {
                displayBookedRooms(DateConvert.convertUtilDateToSqlDate(jDateChooser1.getDate()), name);
            } else {
                displayBookedRooms("search", name);
            }
            System.out.println(jDateChooser1.getDate());
        } else {
            if (jDateChooser1.getDate() != null) {
                displayBookedRooms(DateConvert.convertUtilDateToSqlDate(jDateChooser1.getDate()), bookedRoomsTable);
            } else {
                displayBookedRooms("init", "null");
            }            
        }
    }//GEN-LAST:event_nameCustomerKeyReleased

    private void jLabel28MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel28MouseClicked
        displayBookedRooms("init", "null");
        nameCustomer.setForeground(new Color(204, 204, 204));
        nameCustomer.setText("Rechercher un client...");
        try {
            jDateChooser1.setDate(null);
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jLabel28MouseClicked

    private void deleteBookingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteBookingMouseClicked
        if (deleteBooking.isVisible()) {
            // Afficher une boîte de dialogue de confirmation avec des options personnalisées
            int response = dialogConfirmation();

            // Traiter la réponse de l'utilisateur
            if (response == JOptionPane.OK_OPTION) {
                ArrayList<String[]> checkedRows = getCheckedValues2(bookedRoomsTable, "delete");
                DeleteBookingRooms.deleteBookingRooms(checkedRows);
                displayBookedRooms("init", "null");
                nameCustomer.setForeground(new Color(204, 204, 204));
                nameCustomer.setText("Rechercher un client...");
                try {
                    jDateChooser1.setDate(null);
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }
    }//GEN-LAST:event_deleteBookingMouseClicked

    private void nameCustomerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameCustomerFocusGained
        removePlaceholder(nameCustomer);
    }//GEN-LAST:event_nameCustomerFocusGained

    private void nameCustomerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameCustomerFocusLost
        addPlaceholder(nameCustomer, "Rechercher un client...");
    }//GEN-LAST:event_nameCustomerFocusLost

    private void editBookingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editBookingMouseClicked
        if (editBooking.isVisible()) {
            BookingViewCreation.bookingViewCreation();
            ArrayList<String[]> bookingData = getCheckedValues2(bookedRoomsTable, "update");
            UpdateBookedRoomField form = null;
            try {
                form = new UpdateBookedRoomField(this);
            } catch (ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (String[] data : bookingData) {
                String[] globalName = data[0].split(" ");
                String surName = new String();
                String firstName = new String();
                for (String name : globalName) {
                    if (name.chars().allMatch(Character::isUpperCase)) {
                        if (!surName.equals("")) {
                            surName += " " + name;
                        } else {
                            surName = name;
                        }
                    } else {
                        if (!firstName.equals("")) {
                            firstName += " " + name;
                        } else {
                            firstName = name;
                        }
                    }
                }
                form.customerSurname.setForeground(new Color(0, 0, 0));
                form.customerFirstName.setForeground(new Color(0, 0, 0));
                form.customerMail.setForeground(new Color(0, 0, 0));
                form.customerSurname.setText(surName);
                form.customerFirstName.setText(firstName);
                form.customerMail.setText(data[1]);
                form.visitDuration.setText(data[5]);
                form.roomsNumber.setText(data[6]);
                form.outputDate.setText(data[4]);
                try {
                    form.inputDate.setDate(sdf.parse(data[3]));
                } catch (ParseException e) {
                    System.out.println(e);
                }                
                try {
                    //form.displayAvailableBookingRooms(DateConvert.convertStringToSqlDate(data[3]), DateConvert.convertStringToSqlDate(data[4]));
                    form.displayAvailableBookingRooms(DateConvert.convertStringToSqlDate(data[3]), DateConvert.convertStringToSqlDate(data[4]), data[6].split(", "), "init");
                } catch (ParseException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                form.initLastData(data);
            }
            form.setVisible(true);
        }
    }//GEN-LAST:event_editBookingMouseClicked

    private void editBookingMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editBookingMouseEntered
        if (editBooking.isVisible())
            editBooking.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_editBookingMouseEntered

    private void deleteBookingMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteBookingMouseEntered
        if (deleteBooking.isVisible())
            deleteBooking.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_deleteBookingMouseEntered

    private void visitFormBuuton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_visitFormBuuton1MouseClicked
        visitField.setSelectedIndex(0);
        String type = (String) jComboBox3.getSelectedItem();
        if (type.equals("Listes de chambres")) {
            LocalDate curDate = LocalDate.now();
            Date sDate = Date.valueOf(curDate);
            Date eDate = Date.valueOf(curDate);
            displayAvailableBookingRoomsVisit(sDate, eDate, availableRoomsTable);
            visitDuration2.setText("0");
            outputDate2.setForeground(new Color(204, 204, 204));
            outputDate2.setText("Date de sortie");
        }
    }//GEN-LAST:event_visitFormBuuton1MouseClicked

    private void listFormButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listFormButton1MouseClicked
        visitField.setSelectedIndex(1);
        resetVisitList();
    }//GEN-LAST:event_listFormButton1MouseClicked

    private void visitFormBuuton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_visitFormBuuton2MouseClicked
        visitField.setSelectedIndex(0);
        String type = (String) jComboBox3.getSelectedItem();
        if (type.equals("Listes de chambres")) {
            LocalDate curDate = LocalDate.now();
            Date sDate = Date.valueOf(curDate);
            Date eDate = Date.valueOf(curDate);
            displayAvailableBookingRoomsVisit(sDate, eDate, availableRoomsTable);
            visitDuration2.setText("0");
            outputDate2.setForeground(new Color(204, 204, 204));
            outputDate2.setText("Date de sortie");
        }
    }//GEN-LAST:event_visitFormBuuton2MouseClicked

    private void listFormButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listFormButton3MouseClicked
        visitField.setSelectedIndex(1);
    }//GEN-LAST:event_listFormButton3MouseClicked

    private void customerSurname2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerSurname2FocusGained
        removePlaceholder(customerSurname2);
    }//GEN-LAST:event_customerSurname2FocusGained

    private void customerSurname2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerSurname2FocusLost
        addPlaceholder(customerSurname2, "Nom");
    }//GEN-LAST:event_customerSurname2FocusLost

    private void customerFirstName2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerFirstName2FocusGained
        removePlaceholder(customerFirstName2);
    }//GEN-LAST:event_customerFirstName2FocusGained

    private void customerFirstName2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerFirstName2FocusLost
        addPlaceholder(customerFirstName2, "Prénoms");
    }//GEN-LAST:event_customerFirstName2FocusLost

    private void customerPhoneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerPhoneFocusGained
        removePlaceholder(customerPhone);
    }//GEN-LAST:event_customerPhoneFocusGained

    private void customerPhoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerPhoneFocusLost
        addPlaceholder(customerPhone, "Téléphone");
    }//GEN-LAST:event_customerPhoneFocusLost

    private void visitDuration2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_visitDuration2KeyReleased
        try {
            java.util.Date selectedDate = sdf.parse(inputDate2.getText());
            int dayNumber = Integer.parseInt(visitDuration2.getText());
            if (dayNumber > 0) {
                // Ajouter le nombre de jours à la date
                Calendar calendar = Calendar.getInstance();
                calendar.setTime(selectedDate);
                calendar.add(Calendar.DAY_OF_MONTH, dayNumber);
                java.util.Date resultDate = calendar.getTime();
                outputDate2.setForeground(new Color(0, 0, 0));
                outputDate2.setText(sdf.format(resultDate));
            }
        } catch (NumberFormatException e) {
            outputDate2.setForeground(new Color(204, 204, 204));            
            outputDate2.setText("Date de sortie");
        } catch (ParseException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_visitDuration2KeyReleased

    private void saveVisitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveVisitButtonMouseClicked
        String type = (String) jComboBox3.getSelectedItem();
        if (type.equals("Listes de chambres")) {
            String phone = customerPhone.getText().replaceAll("\\s+", ""), duration = visitDuration2.getText();
            Color foregroundColor = new Color(204, 204, 204);
            if (!customerSurname2.getForeground().equals(foregroundColor) && !customerFirstName2.getForeground().equals(foregroundColor) && !customerPhone.getForeground().equals(foregroundColor) && phone.matches("\\d+") && phone.length() == 10 && !duration.equals("") && Integer.parseInt(duration) > 0 && !outputDate2.getForeground().equals(foregroundColor) && !roomsNb2.getForeground().equals(foregroundColor)) {
                String name = customerSurname2.getText() + " " + customerFirstName2.getText(), roomsList = roomsNb2.getText();
                Date enDate = null, exDate = null;
                try {
                    enDate = DateConvert.convertStringToSqlDate(inputDate2.getText());
                    exDate = DateConvert.convertStringToSqlDate(outputDate2.getText());
                } catch (ParseException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                String tmpTotal = total.getText().replaceAll("[^0-9]", "");
                int totalAmount = Integer.parseInt(tmpTotal);
                String[] cInfo = {name, phone}, listRooms = roomsList.split(", ");
                Date[] dInfo = {enDate, exDate};
                SaveVisit.saveVisit(cInfo, dInfo, listRooms, Integer.parseInt(duration));
                UpdateBalance.updateBalance(totalAmount);
                try {
                    RecuPDF.genererRecuSejour("new", name, roomsList, Integer.parseInt(duration), inputDate2.getText(), outputDate2.getText());
                } catch (SQLException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(null, "Séjour enregistré avec succès");
                resetVisitField("new");
                customerPhone.setForeground(foregroundColor);
                customerPhone.setText("Téléphone");
            } else {
                errorMessage2.setVisible(true);
            }
        } else {
            Color foregroundColor = new Color(204, 204, 204);
            if (!customerSurname2.getForeground().equals(foregroundColor)) {
                InsertToTakedTable.insertToTakedTable(bookingInformation);
                // DeleteBookingVisit.deleteBookingVisit(bookingInformation);
                String tmpTotal = total.getText().replaceAll("[^0-9]", "");
                int totalAmount = Integer.parseInt(tmpTotal);
                UpdateBalance.updateBalance(totalAmount);
                try {
                    RecuPDF.genererRecuSejour("booking", bookingInformation.get(0), bookingInformation.get(6), Integer.parseInt(bookingInformation.get(5)), inputDate2.getText(), outputDate2.getText());
                } catch (SQLException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(null, "Séjour enregistré avec succès");
                resetVisitField("booking");
                JTextField[] textF = {customerSurname2, customerFirstName2, customerPhone, visitDuration2};
                for (JTextField text : textF) {
                    text.setFocusable(false);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Veuiller séléctionner une réservation");
            }
        }
        
    }//GEN-LAST:event_saveVisitButtonMouseClicked

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        String type = (String) jComboBox3.getSelectedItem();
        if (type.equals("Listes de chambres")) {
            phoneLabel.setText("Téléphone");
            customerPhone.setForeground(new Color(204, 204, 204));
            System.out.println("New");
            customerPhone.setText("Téléphone");
            availableRoomsTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]{},
                    new String[]{
                        "", "N°", "Désignation", "Type", "Prix nuité (Ar)"
                    }
            ) {
                Class[] types = new Class[]{
                    java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
                };
                
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }
            });
            customerSurname2.setFocusable(true);
            customerFirstName2.setFocusable(true);
            customerPhone.setFocusable(true);
            visitDuration2.setFocusable(true);
            resetVisitField("new");
        } else {
            phoneLabel.setText("Mail");
            customerPhone.setForeground(new Color(204, 204, 204));
            System.out.println("Booking");
            customerPhone.setText("Mail");
            availableRoomsTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]{},
                    new String[]{
                        "", "Noms", "Mail", "Réservé le", "Entrée le", "Sortie le", "Durée (en jours)", "Chambres"
                    }
            ) {
                Class[] types = new Class[]{
                    java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
                };
                
                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }
            });
            customerSurname2.setFocusable(false);
            customerFirstName2.setFocusable(false);
            customerPhone.setFocusable(false);
            visitDuration2.setFocusable(false);
            if (!bookingInformation.isEmpty()) {
                bookingInformation.clear();
            }
            resetVisitField("booking");
            // Créer un éditeur de cellules personnalisé avec une case à cocher
            SingleCheckboxEditor checkboxEditor = new SingleCheckboxEditor(new JCheckBox());

            // Appliquer l'éditeur de cellules personnalisé à la colonne de checkbox (première colonne)
            availableRoomsTable.getColumnModel().getColumn(0).setCellEditor(checkboxEditor);
        }
        
        errorMessage2.setVisible(false);
        jScrollPane4.getViewport().setBackground(new Color(255, 255, 255));
        availableRoomsTable.setDefaultRenderer(Object.class, new CenteredTableCellRenderer());

        // Créer une instance de CenteredHeaderRenderer avec la hauteur souhaitée
        int headerHeight4 = 35;
        Color backgroundColor4 = new Color(0, 51, 204); // Couleur de fond (SteelBlue)
        Color foregroundColor4 = Color.WHITE; // Couleur du texte (blanc)
        CenteredHeaderRenderer headerRenderer4 = new CenteredHeaderRenderer(headerHeight4, backgroundColor4, foregroundColor4);

        // Récupérer le modèle de colonne de la JTable
        TableColumnModel columnModel4 = availableRoomsTable.getColumnModel();

        // Appliquer le rendu de l'en-tête à chaque colonne de la JTable
        for (int i = 0; i < columnModel4.getColumnCount(); i++) {
            TableColumn column = columnModel4.getColumn(i);
            column.setHeaderRenderer(headerRenderer4);
        }
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void generalSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_generalSearchFocusLost
        addPlaceholder(generalSearch, "Rechercher...");
    }//GEN-LAST:event_generalSearchFocusLost

    private void visitListComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visitListComboBoxActionPerformed
        resetVisitList();        
    }//GEN-LAST:event_visitListComboBoxActionPerformed
    
    public void resetVisitList() {
        String type = (String) visitListComboBox.getSelectedItem();
        if (type.equals("Séjournants")) {
            visitListTitle.setText("Liste des séjournants");
            visitListTable.getColumnModel().getColumn(2).setHeaderValue("Téléphone");
            displayVisitList("Liste des séjournants");
        } else {
            visitListTitle.setText("Liste des arrivés");
            visitListTable.getColumnModel().getColumn(2).setHeaderValue("Mail");
            displayVisitList("Liste des arrivés");
        }
    }
    
    private void deleteVisitListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteVisitListMouseClicked
        if (deleteVisitList.isVisible()) {
            // Afficher une boîte de dialogue de confirmation avec des options personnalisées
            int response = dialogConfirmation();

            // Traiter la réponse de l'utilisateur
            if (response == JOptionPane.OK_OPTION) {
                String type = (String) visitListComboBox.getSelectedItem();
                ArrayList<String[]> checkedRows = visitDeleteCheckedValue();
                if (type.equals("Séjournants")) {
                    DeleteVisitList.deleteVisitList(checkedRows);
                } else DeleteArrivedVisitList.deleteArrivedVisitList(checkedRows);
                resetVisitList();
//                nameCustomer.setForeground(new Color(204, 204, 204));
//                nameCustomer.setText("Rechercher un client...");
//                try {
//                    jDateChooser1.setDate(null);
//                } catch (Exception e) {
//                    System.out.println(e);
//                }
            }
        }
    }//GEN-LAST:event_deleteVisitListMouseClicked

    private void editVisitListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editVisitListMouseClicked
        if (editVisitList.isVisible()) {
            ArrayList<String[]> bookingData = getVisitUpdateInfo();
            UpdateVisitListField2 form = null;
            form = new UpdateVisitListField2(this);
            for (String[] data : bookingData) {
                String[] globalName = data[0].split(" ");
                String surName = new String();
                String firstName = new String();
                for (String name : globalName) {
                    if (name.chars().allMatch(Character::isUpperCase)) {
                        if (!surName.equals("")) {
                            surName += " " + name;
                        } else {
                            surName = name;
                        }
                    } else {
                        if (!firstName.equals("")) {
                            firstName += " " + name;
                        } else {
                            firstName = name;
                        }
                    }
                }
                String type = (String) visitListComboBox.getSelectedItem();
                if (type.equals("Séjournants")) form.phoneField.setText("Téléphone"); 
                else form.phoneField.setText("Mail");
                form.customerSurname.setForeground(new Color(0, 0, 0));
                form.customerFirstName.setForeground(new Color(0, 0, 0));
                form.customerPhone.setForeground(new Color(0, 0, 0));
                form.customerSurname.setText(surName);
                form.customerFirstName.setText(firstName);
                form.customerPhone.setText(data[1]);
                form.dayNb.setText(data[4]);
                form.roomsNb.setText(data[5]);
                form.roomsCount.setText(String.valueOf(data[5].split(", ").length));
                form.exitDate.setText(data[3]);
                form.enterDate.setText(data[2]);
                form.initLastData(data);
                LocalDate currentDate = LocalDate.now();
                Date startDate = Date.valueOf(currentDate);
                Date exitDate = null;
                try {
                    exitDate = DateConvert.convertStringToSqlDate(data[3]);
                } catch (ParseException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                form.display_AvailableBookingRooms(startDate, exitDate);
            }
            form.setVisible(true);
        }
    }//GEN-LAST:event_editVisitListMouseClicked

    private void roomsSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_roomsSearchFocusGained
        removePlaceholder(roomsSearch);
    }//GEN-LAST:event_roomsSearchFocusGained

    private void roomsSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_roomsSearchFocusLost
        addPlaceholder(roomsSearch, "Recherche d'une chambre...");
    }//GEN-LAST:event_roomsSearchFocusLost

    private void roomsSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roomsSearchKeyReleased
        if (roomsDetailsField.getSelectedIndex() == 1) {
            String keyWord = roomsSearch.getText();
            String type = (String) filterAvailableRooms.getSelectedItem();
            String fil;
            fil = switch (type) {
                case "N°" -> "number";
                case "Désignation" -> "design";
                default -> "type";
            };
            java.util.Date limit = startDateChooser.getDate();
        
            // Créer un calendrier et définir la date à 'limit'
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(limit);

            // Ajouter un jour à la date
            calendar.add(Calendar.DATE, 1);

            // Obtenir la nouvelle date
            java.util.Date ext = calendar.getTime();
            
            if (!keyWord.equals("")) displayAvailableSearchRooms(DateConvert.convertUtilDateToSqlDate(limit), DateConvert.convertUtilDateToSqlDate(ext), keyWord, fil);
            else displayAvailableRooms(DateConvert.convertUtilDateToSqlDate(limit), DateConvert.convertUtilDateToSqlDate(ext));
        }
    }//GEN-LAST:event_roomsSearchKeyReleased

    private void searchBookRoomsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchBookRoomsFocusGained
        removePlaceholder(searchBookRooms);
    }//GEN-LAST:event_searchBookRoomsFocusGained

    private void searchBookRoomsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchBookRoomsFocusLost
        addPlaceholder(searchBookRooms, "Rechercher une chambre");
    }//GEN-LAST:event_searchBookRoomsFocusLost

    private void searchBookRoomsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBookRoomsKeyReleased
        String keyWord = searchBookRooms.getText();
        String type = (String) filterBooking.getSelectedItem();
        String filt;
        if (type.equals("N°")) filt = "number";
        else if (type.equals("Désignation")) filt = "design";
        else filt = "type";
        if (!keyWord.isEmpty()) {
            java.util.Date startDate = inputDate.getDate();
            if (startDate == null) {             
                try {
                    displayAvailableBookingRoomsForSearch(DateConvert.convertStringToSqlDate(bookingDate.getText()), DateConvert.convertStringToSqlDate(bookingDate.getText()), avalaibleRoomsBookingTable, keyWord, filt);
                } catch (ParseException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                if (!visitDuration.getText().isEmpty() && !visitDuration.getText().equals("0")) {
                    try {
                        displayAvailableBookingRoomsForSearch(DateConvert.convertUtilDateToSqlDate(startDate), DateConvert.convertStringToSqlDate(outputDate.getText()), avalaibleRoomsBookingTable, keyWord, filt);
                    } catch (ParseException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    displayAvailableBookingRoomsForSearch(DateConvert.convertUtilDateToSqlDate(startDate), DateConvert.convertUtilDateToSqlDate(startDate), avalaibleRoomsBookingTable, keyWord, filt);
                }
            }
        } else {
            java.util.Date startDate = inputDate.getDate();
            if (startDate == null) {             
                try {
                    displayAvailableBookingRooms(DateConvert.convertStringToSqlDate(bookingDate.getText()), DateConvert.convertStringToSqlDate(bookingDate.getText()), avalaibleRoomsBookingTable);
                } catch (ParseException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                if (!visitDuration.getText().isEmpty() && !visitDuration.getText().equals("0")) {
                    try {
                        displayAvailableBookingRooms(DateConvert.convertUtilDateToSqlDate(startDate), DateConvert.convertStringToSqlDate(outputDate.getText()), avalaibleRoomsBookingTable);
                    } catch (ParseException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    displayAvailableBookingRooms(DateConvert.convertUtilDateToSqlDate(startDate), DateConvert.convertUtilDateToSqlDate(startDate), avalaibleRoomsBookingTable);
                }
            }
        }
    }//GEN-LAST:event_searchBookRoomsKeyReleased

    private void jTextField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusGained
       removePlaceholder(jTextField2);
    }//GEN-LAST:event_jTextField2FocusGained

    private void jTextField2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusLost
        addPlaceholder(jTextField2, "Rechercher...");
    }//GEN-LAST:event_jTextField2FocusLost

    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
        String keyWord = jTextField2.getText();
        if (!keyWord.isEmpty()) {
            String type = (String) visitListComboBox.getSelectedItem();
            displayVisitListSearch(type, keyWord);
        } else {
            displayVisitList(visitListTitle.getText());
        }
    }//GEN-LAST:event_jTextField2KeyReleased
    
    private ArrayList<String[]> getVisitUpdateInfo() {
        ArrayList<String[]> checkedValues = new ArrayList<>();
        // Parcourir les lignes de la table
        for (int i = 0; i < visitListTable.getRowCount(); i++) {
            // Vérifier si la checkbox de la première colonne est cochée
            if ((Boolean) visitListTable.getValueAt(i, 0)) {
                // Ajouter la valeur de la deuxième colonne à la liste
                String nameCustomerDelete = (String) visitListTable.getValueAt(i, 1);
                String mailCustomer = (String) visitListTable.getValueAt(i, 2);
                String enterDateDelete = (String) visitListTable.getValueAt(i, 3);
                String exitDateDelete = (String) visitListTable.getValueAt(i, 4);
                String dayNb = (String) visitListTable.getValueAt(i, 5);
                String roomsBooked = (String) visitListTable.getValueAt(i, 6);
                String[] listData = {nameCustomerDelete, mailCustomer, enterDateDelete, exitDateDelete, dayNb, roomsBooked};
                checkedValues.add(listData);
                break;
            }
        }
        return checkedValues;
    }
    
    private ArrayList<String[]> visitDeleteCheckedValue() {
        ArrayList<String[]> checkedValues = new ArrayList<>();
        DefaultTableModel tblModel = (DefaultTableModel) visitListTable.getModel();
        // Parcourir les lignes de la table
        for (int i = 0; i < tblModel.getRowCount(); i++) {
            // Vérifier si la checkbox de la première colonne est cochée
            if ((Boolean) tblModel.getValueAt(i, 0)) {
                // Ajouter la valeur de la deuxième colonne à la liste
                String nameCustomerDelete = (String) tblModel.getValueAt(i, 1);
                String mailCustomer = (String) tblModel.getValueAt(i, 2);
                String enterDateDelete = (String) tblModel.getValueAt(i, 3);
                String exitDateDelete = (String) tblModel.getValueAt(i, 4);
                String dayNb = (String) tblModel.getValueAt(i, 5);
                String roomsBooked = (String) tblModel.getValueAt(i, 6);
                String[] listData = {nameCustomerDelete, mailCustomer, enterDateDelete, exitDateDelete, dayNb, roomsBooked};
                checkedValues.add(listData);
            }
        }
        return checkedValues;
    }
    
    private void resetVisitField(String type) {
        Color foregroundColor = new Color(204, 204, 204);
        JTextField[] textF = {customerSurname2, customerFirstName2, customerPhone, outputDate2, roomsNb2};
        for (JTextField t : textF) {
            t.setForeground(foregroundColor);
        }
        customerSurname2.setText("NOM");
        customerFirstName2.setText("Prénoms");
        //  customerPhone.setText("Téléphone");
        outputDate2.setText("Date de sortie");
        roomsNb2.setText("Séléctionner dans le tableau");
        JTextField[] textF2 = {visitDuration2, roomsCount, total};
        for (JTextField t : textF2) {
            t.setText("0");
        }
        LocalDate curDate = LocalDate.now();
        Date startDate = Date.valueOf(curDate);
        inputDate2.setText(sdf.format(startDate));
        
        if (type.equals("new")) {
            Date sDate = Date.valueOf(curDate);
            bookingDate.setText(sdf.format(sDate));
            Date eDate = Date.valueOf(curDate);
            errorMessage2.setVisible(false);
            displayAvailableBookingRoomsVisit(sDate, eDate, availableRoomsTable);
        } else {
            displayBookedRooms(startDate, availableRoomsTable);
        }
        
    }
    
    public ArrayList<String[]> getCheckedValues2(JTable table, String action) {
        ArrayList<String[]> checkedValues = new ArrayList<>();
        DefaultTableModel tblModel = (DefaultTableModel) table.getModel();
        if (action.equals("delete")) {
            // Parcourir les lignes de la table
            for (int i = 0; i < tblModel.getRowCount(); i++) {
                // Vérifier si la checkbox de la première colonne est cochée
                if ((Boolean) tblModel.getValueAt(i, 0)) {
                    // Ajouter la valeur de la deuxième colonne à la liste
                    String nameCustomerDelete = (String) tblModel.getValueAt(i, 1);
                    String mailCustomer = (String) tblModel.getValueAt(i, 2);
                    String bookingDateDelete = (String) tblModel.getValueAt(i, 3);
                    String enterDateDelete = (String) tblModel.getValueAt(i, 4);
                    String exitDateDelete = (String) tblModel.getValueAt(i, 5);
                    String dayNb = (String) tblModel.getValueAt(i, 6);
                    String roomsBooked = (String) tblModel.getValueAt(i, 7);
                    String[] listData = {nameCustomerDelete, mailCustomer, bookingDateDelete, enterDateDelete, exitDateDelete, dayNb, roomsBooked};
                    checkedValues.add(listData);
                }
            }
        } else {
            // Parcourir les lignes de la table
            for (int i = 0; i < tblModel.getRowCount(); i++) {
                // Vérifier si la checkbox de la première colonne est cochée
                if ((Boolean) tblModel.getValueAt(i, 0)) {
                    // Ajouter la valeur de la deuxième colonne à la liste
                    String nameCustomerDelete = (String) tblModel.getValueAt(i, 1);
                    String mailCustomer = (String) tblModel.getValueAt(i, 2);
                    String bookingDateDelete = (String) tblModel.getValueAt(i, 3);
                    String enterDateDelete = (String) tblModel.getValueAt(i, 4);
                    String exitDateDelete = (String) tblModel.getValueAt(i, 5);
                    String dayNb = (String) tblModel.getValueAt(i, 6);
                    String roomsBooked = (String) tblModel.getValueAt(i, 7);
                    String[] listData = {nameCustomerDelete, mailCustomer, bookingDateDelete, enterDateDelete, exitDateDelete, dayNb, roomsBooked};
                    checkedValues.add(listData);
                    break;
                }
            }
        }
        
        return checkedValues;
    }
    
    public void displayBookedRooms(String action, String name) {
        ArrayList<String[]> listData = new ArrayList<>();
        if (action.equals("init")) {
            listData = BookingList.bookingList();
        } else {
            listData = BookingSearch.bookingSearch(name);
        }
        
        DefaultTableModel tblModel = (DefaultTableModel) bookedRoomsTable.getModel();
        tblModel.setRowCount(0); // Effacer toutes les lignes existantes

        for (String[] data : listData) {
            // Créer un nouveau tableau d'objets pour représenter la ligne de la table
            Object[] rowData = new Object[data.length + 1]; // +1 pour la colonne booléenne

            // La première colonne est un booléen initialisé à false
            rowData[0] = false;

            // Copier les données de la liste dans les colonnes suivantes
            System.arraycopy(data, 0, rowData, 1, data.length);

            // Ajouter la ligne au modèle de la table
            tblModel.addRow(rowData);
        }

        // Ajouter des écouteurs aux checkboxes
        addCheckboxListeners(bookedRoomsTable, "bookingList");
    }
    
    private void displayBookedRooms(Date startDate, String name) {
        ArrayList<String[]> listData = BookingSearch.bookingSearch(name, startDate);
        
        DefaultTableModel tblModel = (DefaultTableModel) bookedRoomsTable.getModel();
        tblModel.setRowCount(0); // Effacer toutes les lignes existantes

        for (String[] data : listData) {
            // Créer un nouveau tableau d'objets pour représenter la ligne de la table
            Object[] rowData = new Object[data.length + 1]; // +1 pour la colonne booléenne

            // La première colonne est un booléen initialisé à false
            rowData[0] = false;

            // Copier les données de la liste dans les colonnes suivantes
            System.arraycopy(data, 0, rowData, 1, data.length);

            // Ajouter la ligne au modèle de la table
            tblModel.addRow(rowData);
        }

        // Ajouter des écouteurs aux checkboxes
        addCheckboxListeners(bookedRoomsTable, "bookingList");
    }
    
    private void displayBookedRooms(Date startDate, JTable table) {
        ArrayList<String[]> listData = BookingSearch.bookingSearch(startDate);
        
        DefaultTableModel tblModel = (DefaultTableModel) table.getModel();
        tblModel.setRowCount(0); // Effacer toutes les lignes existantes

        for (String[] data : listData) {
            // Créer un nouveau tableau d'objets pour représenter la ligne de la table
            Object[] rowData = new Object[data.length + 1]; // +1 pour la colonne booléenne

            // La première colonne est un booléen initialisé à false
            rowData[0] = false;

            // Copier les données de la liste dans les colonnes suivantes
            System.arraycopy(data, 0, rowData, 1, data.length);

            // Ajouter la ligne au modèle de la table
            tblModel.addRow(rowData);
        }

        // Ajouter des écouteurs aux checkboxes
        if (table.equals(bookedRoomsTable)) {
            addCheckboxListeners(bookedRoomsTable, "bookingList");
        } else {
            bookingVisitCheckboxListener();
        }
    }
    
    private void resetBookingForm() {
//        Color initColor = new Color(204, 204, 204);
        addPlaceholder(customerSurname, "Nom", "surnname");
        addPlaceholder(customerFirstName, "Prénoms", "firstname");
        addPlaceholder(customerEmail, "Mail", "mail");
        visitDuration.setText("0");
        try {
            inputDate.setDate(null);
        } catch (Exception e) {
            System.out.println(e);
        }
        
        addPlaceholder(outputDate, "Date de sortie", "exitdate");
        addPlaceholder(roomsNumber, "Séléctionner dans le tableau", "enterdate");
        LocalDate currentDate = LocalDate.now();
        Date startDate = Date.valueOf(currentDate);
        bookingDate.setText(sdf.format(startDate));
        Date endDate = Date.valueOf(currentDate);
        displayAvailableBookingRooms(startDate, endDate, avalaibleRoomsBookingTable);
        test.setVisible(false);
    }
    
    private boolean isIconEqual(JLabel label, String iconPath) {
        // Charger l'icône à comparer
        ImageIcon compareIcon = new ImageIcon(getClass().getResource(iconPath));

        // Obtenir l'icône actuelle du label
        Icon currentIcon = label.getIcon();

        // Vérifier si les deux icônes sont des ImageIcon et comparer les images internes
        if (currentIcon instanceof ImageIcon && compareIcon.getImage() != null) {
            Image currentImage = ((ImageIcon) currentIcon).getImage();
            Image compareImage = compareIcon.getImage();

            // Comparer les références des images
            return currentImage.equals(compareImage);
        }
        
        return false;
    }
    
    public void displayVisitList(String type) {
        ArrayList<String[]> listData = new ArrayList<>();
        if (type.equals("Liste des séjournants")) {
            listData = DisplayVisitList.displayVisitList();
        } else {
            listData = DisplayArrivedList.displayArrivedList();
        }
        DefaultTableModel tblModel = (DefaultTableModel) visitListTable.getModel();
        tblModel.setRowCount(0); // Effacer toutes les lignes existantes
        for (String[] data : listData) {
            // Créer un nouveau tableau d'objets pour représenter la ligne de la table
            Object[] rowData = new Object[data.length + 1]; // +1 pour la colonne booléenne

            // La première colonne est un booléen initialisé à false
            rowData[0] = false;

            // Copier les données de la liste dans les colonnes suivantes
            System.arraycopy(data, 0, rowData, 1, data.length);

            // Ajouter la ligne au modèle de la table
            tblModel.addRow(rowData);
        }

        // Ajouter des écouteurs aux checkboxes
        visitLisCheckBoxListener();
    }
    
    public void displayVisitListSearch(String type, String keyWord) {
        ArrayList<String[]> listData = new ArrayList<>();
        listData = VisitListSearch.visitListSearch(keyWord, type);
        DefaultTableModel tblModel = (DefaultTableModel) visitListTable.getModel();
        tblModel.setRowCount(0); // Effacer toutes les lignes existantes
        for (String[] data : listData) {
            // Créer un nouveau tableau d'objets pour représenter la ligne de la table
            Object[] rowData = new Object[data.length + 1]; // +1 pour la colonne booléenne

            // La première colonne est un booléen initialisé à false
            rowData[0] = false;

            // Copier les données de la liste dans les colonnes suivantes
            System.arraycopy(data, 0, rowData, 1, data.length);

            // Ajouter la ligne au modèle de la table
            tblModel.addRow(rowData);
        }

        // Ajouter des écouteurs aux checkboxes
        visitLisCheckBoxListener();
    }
    
    public void displayRooms() {
        ArrayList<String[]> listData = DisplayRooms.selectRooms();
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        tblModel.setRowCount(0); // Effacer toutes les lignes existantes

        for (String[] data : listData) {
            // Créer un nouveau tableau d'objets pour représenter la ligne de la table
            Object[] rowData = new Object[data.length + 1]; // +1 pour la colonne booléenne

            // La première colonne est un booléen initialisé à false
            rowData[0] = false;

            // Copier les données de la liste dans les colonnes suivantes
            System.arraycopy(data, 0, rowData, 1, data.length);

            // Ajouter la ligne au modèle de la table
            tblModel.addRow(rowData);
        }

        // Ajouter des écouteurs aux checkboxes
        addCheckboxListeners(jTable1, "rooms");
    }
    
    public void displayAvailableBookingRooms(Date startDate, Date endDate, JTable table) {
        ArrayList<String[]> listData = AvailableBookingRooms.selectRooms(startDate, endDate);
        DefaultTableModel tblModel = (DefaultTableModel) table.getModel();
        tblModel.setRowCount(0); // Effacer toutes les lignes existantes
        if (!listData.isEmpty()) {
            for (String[] data : listData) {
                // Créer un nouveau tableau d'objets pour représenter la ligne de la table
                Object[] rowData = new Object[data.length + 1]; // +1 pour la colonne booléenne

                // La première colonne est un booléen initialisé à false
                rowData[0] = false;

                // Copier les données de la liste dans les colonnes suivantes
                System.arraycopy(data, 0, rowData, 1, data.length);

                // Ajouter la ligne au modèle de la table
                tblModel.addRow(rowData);
            }
        } else {
            System.out.print("Vide");
        }

        // Ajouter des écouteurs aux checkboxes
        addCheckboxListeners(avalaibleRoomsBookingTable, "booking");
    }
    
    public void displayAvailableBookingRoomsForSearch(Date startDate, Date endDate, JTable table, String keyWord, String Filter) {
        ArrayList<String[]> listData = SearchAvailableRoomForUpdate.searchAvailableRooms(startDate, endDate, keyWord, Filter);
        DefaultTableModel tblModel = (DefaultTableModel) table.getModel();
        tblModel.setRowCount(0); // Effacer toutes les lignes existantes
        if (!listData.isEmpty()) {
            for (String[] data : listData) {
                // Créer un nouveau tableau d'objets pour représenter la ligne de la table
                Object[] rowData = new Object[data.length + 1]; // +1 pour la colonne booléenne

                // La première colonne est un booléen initialisé à false
                rowData[0] = false;

                // Copier les données de la liste dans les colonnes suivantes
                System.arraycopy(data, 0, rowData, 1, data.length);

                // Ajouter la ligne au modèle de la table
                tblModel.addRow(rowData);
            }
        } else {
            System.out.print("Vide");
        }

        // Ajouter des écouteurs aux checkboxes
        addCheckboxListeners(avalaibleRoomsBookingTable, "booking");
    }
    
    private void initAvailableRooms(Date startDate, Date endDate) {
        displayAvailableRooms(startDate, endDate);
    }
    
    public void displayAvailableRooms(Date startDate, Date endDate) {
        ArrayList<String[]> listData = AvailableBookingRooms.selectRooms(startDate, endDate);
        DefaultTableModel tblModel = (DefaultTableModel) avalaibleRoomListTable.getModel();
        tblModel.setRowCount(0); // Effacer toutes les lignes existantes
        if (!listData.isEmpty()) {
            for (String[] data : listData) {
                // Créer un nouveau tableau d'objets pour représenter la ligne de la table
                Object[] rowData = new Object[data.length]; // +1 pour la colonne booléenne

                // Copier les données de la liste dans les colonnes suivantes
                System.arraycopy(data, 0, rowData, 0, data.length);

                // Ajouter la ligne au modèle de la table
                tblModel.addRow(rowData);
            }
        } else {
            System.out.print("Vide");
        }
    }
    
    public void displayAvailableSearchRooms(Date startDate, Date endDate, String keyWord, String filter) {
        ArrayList<String[]> listData = SearchAvailableRoomForUpdate.searchAvailableRooms(startDate, endDate, keyWord, filter);
        DefaultTableModel tblModel = (DefaultTableModel) avalaibleRoomListTable.getModel();
        tblModel.setRowCount(0); // Effacer toutes les lignes existantes
        if (!listData.isEmpty()) {
            for (String[] data : listData) {
                // Créer un nouveau tableau d'objets pour représenter la ligne de la table
                Object[] rowData = new Object[data.length]; // +1 pour la colonne booléenne

                // Copier les données de la liste dans les colonnes suivantes
                System.arraycopy(data, 0, rowData, 0, data.length);

                // Ajouter la ligne au modèle de la table
                tblModel.addRow(rowData);
            }
        } else {
            System.out.print("Vide");
        }
    }
    
    public void displayAvailableBookingRoomsVisit(Date startDate, Date endDate, JTable table) {
        ArrayList<String[]> listData = AvailableBookingRooms.selectRooms(startDate, endDate);
        DefaultTableModel tblModel = (DefaultTableModel) table.getModel();
        tblModel.setRowCount(0); // Effacer toutes les lignes existantes
        if (!listData.isEmpty()) {
            for (String[] data : listData) {
                // Créer un nouveau tableau d'objets pour représenter la ligne de la table
                Object[] rowData = new Object[data.length + 1]; // +1 pour la colonne booléenne

                // La première colonne est un booléen initialisé à false
                rowData[0] = false;

                // Copier les données de la liste dans les colonnes suivantes
                System.arraycopy(data, 0, rowData, 1, data.length);

                // Ajouter la ligne au modèle de la table
                tblModel.addRow(rowData);
            }
        } else {
            System.out.print("Vide");
        }

        // Ajouter des écouteurs aux checkboxes
        addCheckboxListeners(availableRoomsTable, "visiting");
    }
    
    private void addCheckboxListeners(JTable table, String menu) {
        TableColumn checkBoxColumn = table.getColumnModel().getColumn(0);
        checkBoxColumn.setCellEditor(new DefaultCellEditor(new JCheckBox()));
        checkBoxColumn.setCellRenderer(table.getDefaultRenderer(Boolean.class));
        
        switch (menu) {
            case "rooms" ->
                table.getModel().addTableModelListener(e -> updateIcons());
            case "booking" ->
                table.getModel().addTableModelListener(e -> recoverAvailableRooms(avalaibleRoomsBookingTable, roomsNumber));
            case "bookingList" ->
                table.getModel().addTableModelListener(e -> updateIcons2());
            case "visiting" ->
                table.getModel().addTableModelListener(e -> recoverAvailableRooms(availableRoomsTable, roomsNb2));
            default -> {
            }
        }
    }
    
    private void visitLisCheckBoxListener() {
        TableColumn checkBoxColumn = visitListTable.getColumnModel().getColumn(0);
        checkBoxColumn.setCellEditor(new DefaultCellEditor(new JCheckBox()));
        checkBoxColumn.setCellRenderer(visitListTable.getDefaultRenderer(Boolean.class));
        visitListTable.getModel().addTableModelListener(e -> visitListUpdateIcons());        
    }
    
    private void visitListUpdateIcons() {
        int selectedCount = 0;
        
        for (int i = 0; i < visitListTable.getRowCount(); i++) {
            Boolean isChecked = (Boolean) visitListTable.getValueAt(i, 0);
            if (isChecked != null && isChecked) {
                selectedCount++;
            }
        }
        
        if (selectedCount == 1) {
            editVisitList.setVisible(true);
            deleteVisitList.setVisible(true);
        } else if (selectedCount > 1) {
            editVisitList.setVisible(false);
            deleteVisitList.setVisible(true);
        } else {
            editVisitList.setVisible(false);
            deleteVisitList.setVisible(false);
        }
    }
    
    private void bookingVisitCheckboxListener() {
        TableColumn checkBoxColumn = availableRoomsTable.getColumnModel().getColumn(0);
        checkBoxColumn.setCellEditor(new DefaultCellEditor(new JCheckBox()));
        checkBoxColumn.setCellRenderer(availableRoomsTable.getDefaultRenderer(Boolean.class));
        availableRoomsTable.getModel().addTableModelListener(e -> recoverBooking());
    }
    
    private void recoverBooking() {
        DefaultTableModel tblModel = (DefaultTableModel) availableRoomsTable.getModel();
        int c = 0;
        for (int i = 0; i < tblModel.getRowCount(); i++) {
            // Vérifier si la checkbox de la première colonne est cochée
            if ((Boolean) tblModel.getValueAt(i, 0)) {
                bookingInformation.clear();
                bookingInformation.add((String) tblModel.getValueAt(i, 1));
                bookingInformation.add((String) tblModel.getValueAt(i, 2));
                bookingInformation.add((String) tblModel.getValueAt(i, 3));
                bookingInformation.add((String) tblModel.getValueAt(i, 4));
                bookingInformation.add((String) tblModel.getValueAt(i, 5));
                bookingInformation.add((String) tblModel.getValueAt(i, 6));
                bookingInformation.add((String) tblModel.getValueAt(i, 7));
                errorMessage2.setVisible(false);
                roomsNb2.setForeground(Color.BLACK);
                customerSurname2.setForeground(Color.BLACK);
                customerFirstName2.setForeground(Color.BLACK);
                customerPhone.setForeground(Color.BLACK);
                outputDate2.setForeground(Color.BLACK);
                String roomsNbr = (String) tblModel.getValueAt(i, 7);
                roomsNb2.setText(roomsNbr);
                customerPhone.setText((String) tblModel.getValueAt(i, 2));
                int totalAmount = 0;
                for (String nb : roomsNbr.split(", ")) {
                    totalAmount += Integer.parseInt(SelectAmount.selectAmount(nb));
                }
//                total.setText(String.valueOf(nbFormat.format(totalAmount)));
                String tmpName = (String) tblModel.getValueAt(i, 1);
                String[] globalName = tmpName.split(" ");
                String surName = new String();
                String firstName = new String();
                for (String name : globalName) {
                    if (name.chars().allMatch(Character::isUpperCase)) {
                        if (!surName.equals("")) {
                            surName += " " + name;
                        } else {
                            surName = name;
                        }
                    } else {
                        if (!firstName.equals("")) {
                            firstName += " " + name;
                        } else {
                            firstName = name;
                        }
                    }
                }
                customerSurname2.setText(surName);
                customerFirstName2.setText(firstName);
                String duration = (String) tblModel.getValueAt(i, 6);
                visitDuration2.setText(duration);
                totalAmount*=Integer.parseInt(duration);
                total.setText(String.valueOf(nbFormat.format(totalAmount)));
                outputDate2.setText((String) tblModel.getValueAt(i, 5));
//                JTextField[] cInfo = {customerSurname2, customerFirstName2, customerPhone};
//                for (JTextField info : cInfo) {
//                    info.setFocusable(true);
//                }
                c = 1;
                break;
            }
        }
        if (c == 0) {
            errorMessage2.setVisible(false);
            Color foregound = new Color(204, 204, 204);
            JTextField[] textF = {customerSurname2, customerFirstName2, outputDate2, customerPhone, roomsNb2};
            for (JTextField text : textF) {
                text.setForeground(foregound);
            }
            roomsNb2.setText("Séléctionner dans le tableau");
            customerSurname2.setText("NOM");
            customerFirstName2.setText("Prénoms");
            customerPhone.setText("Mail");
            outputDate2.setText("Date de sortie");
            total.setText("0");
            visitDuration2.setText("0");
//            JTextField[] cInfo = {customerSurname2, customerFirstName2, customerPhone};
//            for (JTextField info : cInfo) {
//                info.setFocusable(false);
//            }
            // roomsCount.setText("0");
        }
        
    }    
    
    private void recoverAvailableRooms(JTable table, JTextField text) {
        ArrayList<String> roomsNb = new ArrayList<>();
        if (table.equals(availableRoomsTable)) {
            roomsNb = getCheckedValues(table, "visit");
        } else {
            roomsNb = getCheckedValues(table, "booked");
        }
        String roomsSelected = new String();
        int i = 0;
        for (String room : roomsNb) {
            if (i == 0) {
                roomsSelected += room;
                i += 1;
            } else {
                roomsSelected += ", " + room;
            }
        }
        if (!roomsSelected.equals("")) {
            text.setForeground(new Color(0, 0, 0));
            text.setText(roomsSelected);
        } else {
            text.setForeground(new Color(204, 204, 204));
            text.setText("Séléctionner dans le tableau");
            if (table.equals(availableRoomsTable)) {
                total.setText("0");
            }
        }
        
    }
    
    private void removePlaceholder(JTextField field) {
        Color placeholderColor = new Color(204, 204, 204);
        if (field.getForeground().equals(placeholderColor)) {
            field.setText("");
            field.setForeground(new Color(0, 0, 0));
        }
    }
    
    private void addPlaceholder(JTextField field, String text) {
        if (field.getText().equals("")) {
            field.setForeground(new Color(204, 204, 204));
            field.setText(text);
        }
    }
    
    private void addPlaceholder(JTextField field, String text, String action) {
        field.setForeground(new Color(204, 204, 204));
        field.setText(text);
        
    }

    // Méthode pour récupérer les valeurs de la deuxième colonne pour chaque checkbox cochée
    public ArrayList<String> getCheckedValues(JTable table, String action) {
        ArrayList<String> checkedValues = new ArrayList<>();
        DefaultTableModel tblModel = (DefaultTableModel) table.getModel();
        if (action.equals("delete") || action.equals("booked") || action.equals("visit")) {
            ArrayList<String> amount = new ArrayList<>();
            // Parcourir les lignes de la table
            for (int i = 0; i < tblModel.getRowCount(); i++) {
                // Vérifier si la checkbox de la première colonne est cochée
                if ((Boolean) tblModel.getValueAt(i, 0)) {
                    // Ajouter la valeur de la deuxième colonne à la liste
                    checkedValues.add((String) tblModel.getValueAt(i, 1));
                    amount.add((String) tblModel.getValueAt(i, 4));
                }
            }
            String opt = (String) jComboBox3.getSelectedItem();
            if (action.equals("visit") && opt.equals("Listes de chambres")) {
                totalToPayed(amount, Integer.parseInt(visitDuration2.getText()));
            }
        } else {
            // Parcourir les lignes de la table
            for (int i = 0; i < tblModel.getRowCount(); i++) {
                // Vérifier si la checkbox de la première colonne est cochée
                if ((Boolean) tblModel.getValueAt(i, 0)) {
                    // Ajouter la valeur de la deuxième colonne à la liste
                    checkedValues.add((String) tblModel.getValueAt(i, 1));
                    break;
                }
            }
        }
        
        return checkedValues;
    }
    
    private void totalToPayed(ArrayList<String> amount, int duration) {
        int r = 0;
        for (String value : amount) {
            String v = value.replaceAll("[^0-9]", "");
            System.out.println(v);
            r += Integer.parseInt(v);
        }
        r*=duration;
        total.setText(String.valueOf(nbFormat.format(r)));
    }
    
    private int dialogConfirmation() {
        // Options personnalisées pour les boutons
        Object[] options = {"OK", "Annuler"};
        int response = JOptionPane.showOptionDialog(null,
                "Êtes-vous sûr de vouloir supprimer ceci ?", // Message
                "Confirmation", // Titre
                JOptionPane.DEFAULT_OPTION, // Type d'option par défaut
                JOptionPane.QUESTION_MESSAGE, // Icône de question
                null, // Icône personnalisée (null utilise l'icône par défaut)
                options, // Tableau d'options personnalisé
                options[0]); // Option par défaut
        return response;
    }
    
    private void updateIcons() {
        int selectedCount = 0;
        
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            Boolean isChecked = (Boolean) jTable1.getValueAt(i, 0);
            if (isChecked != null && isChecked) {
                selectedCount++;
            }
        }
        
        if (selectedCount == 1) {
            roomsIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/editIcon.png")));
            roomsIcon2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/deleteIcon.png")));
        } else if (selectedCount > 1) {
            roomsIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/deleteIcon.png")));
            roomsIcon2.setIcon(new javax.swing.ImageIcon(getClass().getResource("")));
        } else {
            roomsIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/addIcon.png")));
            roomsIcon2.setIcon(new javax.swing.ImageIcon(getClass().getResource("")));
        }
    }
    
    private void updateIcons2() {
        int selectedCount = 0;
        
        for (int i = 0; i < bookedRoomsTable.getRowCount(); i++) {
            Boolean isChecked = (Boolean) bookedRoomsTable.getValueAt(i, 0);
            if (isChecked != null && isChecked) {
                selectedCount++;
            }
        }
        
        if (selectedCount == 1) {
            editBooking.setVisible(true);
            deleteBooking.setVisible(true);
        } else if (selectedCount > 1) {
            editBooking.setVisible(false);
            deleteBooking.setVisible(true);
        } else {
            editBooking.setVisible(false);
            deleteBooking.setVisible(false);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private training.SideBar allRoomsField;
    private javax.swing.JLabel allRoomsMenu;
    private javax.swing.JLabel availableRoomsMenu;
    private javax.swing.JTable availableRoomsTable;
    private javax.swing.JTable avalaibleRoomListTable;
    private javax.swing.JTable avalaibleRoomsBookingTable;
    private training.SideBar avalaibleRoomsField;
    private javax.swing.JLabel balance;
    private training.SideBar bookedRoomsField;
    private javax.swing.JLabel bookedRoomsMenu;
    public javax.swing.JTable bookedRoomsTable;
    private javax.swing.JPanel booking;
    private javax.swing.JTextField bookingDate;
    private javax.swing.JTabbedPane bookingFields;
    private javax.swing.JLabel bookingIcon;
    private javax.swing.JLabel bookingLabel;
    private training.SideBar bookingMenu;
    private javax.swing.JLabel burgerMenu1;
    private javax.swing.JTextField customerEmail;
    private javax.swing.JTextField customerFirstName;
    public javax.swing.JTextField customerFirstName2;
    public javax.swing.JTextField customerPhone;
    private javax.swing.JTextField customerSurname;
    public javax.swing.JTextField customerSurname2;
    private javax.swing.JPanel dashboard;
    private javax.swing.JLabel dashboardIcon;
    private javax.swing.JLabel dashboardLabel;
    private training.SideBar dashboardMenu;
    public javax.swing.JLabel deleteBooking;
    private javax.swing.JLabel deleteVisitList;
    private javax.swing.JTabbedPane displayField;
    private javax.swing.JLabel displayTitle;
    public javax.swing.JLabel editBooking;
    private javax.swing.JLabel editVisitList;
    private javax.swing.JLabel errorMessage2;
    private javax.swing.JLabel fieldBookingTitle;
    private javax.swing.JComboBox<String> filterAvailableRooms;
    private javax.swing.JComboBox<String> filterBooking;
    private javax.swing.JTextField generalSearch;
    private training.SideBar horizontalMenu;
    private com.toedter.calendar.JDateChooser inputDate;
    private javax.swing.JTextField inputDate2;
    private javax.swing.JComboBox<String> jComboBox3;
    public com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JPanel listFormButton1;
    private javax.swing.JPanel listFormButton3;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel mail;
    public javax.swing.JTextField nameCustomer;
    private javax.swing.JLabel notification;
    private javax.swing.JTextField outputDate;
    public javax.swing.JTextField outputDate2;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JPanel rooms;
    private javax.swing.JLabel roomsAvailable;
    public javax.swing.JTextField roomsCount;
    private javax.swing.JTabbedPane roomsDetailsField;
    private javax.swing.JLabel roomsIcon;
    private javax.swing.JLabel roomsIcon1;
    private javax.swing.JLabel roomsIcon2;
    private javax.swing.JLabel roomsLabel;
    private training.SideBar roomsMenu;
    public javax.swing.JTextField roomsNb2;
    private javax.swing.JTextField roomsNumber;
    private javax.swing.JTextField roomsSearch;
    private javax.swing.JLabel roomsSearchBar;
    private javax.swing.JLabel roomsSearchButton;
    private javax.swing.JLabel roomsTaken;
    private javax.swing.JLabel roomsTotal;
    private javax.swing.JPanel saveBooking;
    private javax.swing.JPanel saveVisitButton;
    private javax.swing.JLabel searchBar;
    private javax.swing.JTextField searchBookRooms;
    private javax.swing.JLabel searchButton;
    private javax.swing.JLabel setting;
    private training.SideBar sideBar1;
    private training.SideBar sideBar10;
    private training.SideBar sideBar11;
    private training.SideBar sideBar12;
    private training.SideBar sideBar13;
    private training.SideBar sideBar14;
    private training.SideBar sideBar15;
    private training.SideBar sideBar16;
    private training.SideBar sideBar17;
    private training.SideBar sideBar18;
    private training.SideBar sideBar19;
    private training.SideBar sideBar2;
    private training.SideBar sideBar20;
    private training.SideBar sideBar21;
    private training.SideBar sideBar22;
    private training.SideBar sideBar23;
    private training.SideBar sideBar24;
    private training.SideBar sideBar25;
    private training.SideBar sideBar26;
    private training.SideBar sideBar3;
    private training.SideBar sideBar4;
    private training.SideBar sideBar5;
    private training.SideBar sideBar6;
    private training.SideBar sideBar7;
    private training.SideBar sideBar8;
    private training.SideBar sideBar9;
    private com.toedter.calendar.JDateChooser startDateChooser;
    private javax.swing.JLabel test;
    public javax.swing.JTextField total;
    private training.SideBar verticalMenu;
    private javax.swing.JPanel visit;
    private javax.swing.JTextField visitDuration;
    public javax.swing.JTextField visitDuration2;
    private javax.swing.JTabbedPane visitField;
    private training.SideBar visitForm;
    private javax.swing.JPanel visitFormBuuton1;
    private javax.swing.JPanel visitFormBuuton2;
    private javax.swing.JLabel visitIcon;
    private javax.swing.JLabel visitLabel;
    private training.SideBar visitList;
    public javax.swing.JComboBox<String> visitListComboBox;
    public javax.swing.JTable visitListTable;
    public javax.swing.JLabel visitListTitle;
    public javax.swing.JLabel visitListTitle1;
    private training.SideBar visitMenu;
    // End of variables declaration//GEN-END:variables
}

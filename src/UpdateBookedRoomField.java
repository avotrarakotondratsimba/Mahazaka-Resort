
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.text.AbstractDocument;
import javax.swing.text.PlainDocument;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author AVOTRA
 */
public class UpdateBookedRoomField extends javax.swing.JFrame {

    /**
     * Creates new form UpdateBookedRoom
     */
    SimpleDateFormat sdf = new SimpleDateFormat("dd / MM / yyyy");
    Main mainF = new Main();
    public String[] lastData = new String[7];
    String init = "init";
    int c = 1, d = 1;
    public UpdateBookedRoomField(Main mainFrame) throws ParseException {
       
        mainF = mainFrame;
        initComponents();
        LocalDate currentDate = LocalDate.now();
        Date startDate = Date.valueOf(currentDate);
        bookingDate.setText(sdf.format(startDate));
        addWindowCloseListener();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // Ajouter un WindowListener pour détecter la fermeture de la fenêtre
    private void addWindowCloseListener() {
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                handleWindowClosing();
            }
        });
    }

    // Méthode pour gérer la fermeture de la fenêtre
    private void handleWindowClosing() {
        BookingViewDeletion.deleteBookingView();
        mainF.displayBookedRooms("init", "null");
        mainF.nameCustomer.setForeground(new Color(204, 204, 204));
        mainF.nameCustomer.setText("Rechercher un client...");
        try {
            mainF.jDateChooser1.setDate(null);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    @Override
    public void dispose() {
        handleWindowClosing(); // Appeler la méthode de gestion de la fermeture avant de disposer de la fenêtre
        super.dispose(); // Appeler la méthode dispose() de la superclasse
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sideBar1 = new training.SideBar();
        sideBar14 = new training.SideBar();
        bookingDate = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        sideBar15 = new training.SideBar();
        customerMail = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        sideBar16 = new training.SideBar();
        customerSurname = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        sideBar17 = new training.SideBar();
        customerFirstName = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        sideBar20 = new training.SideBar();
        visitDuration = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        sideBar21 = new training.SideBar();
        outputDate = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        sideBar19 = new training.SideBar();
        roomsNumber = new javax.swing.JTextField();
        jPanel19 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        sideBar18 = new training.SideBar();
        jPanel18 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        inputDate = new com.toedter.calendar.JDateChooser();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        avalaibleRoomsBookingTable = new javax.swing.JTable();
        cancel = new javax.swing.JButton();
        test = new javax.swing.JLabel();
        buttonSave = new javax.swing.JButton();
        resendMail = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        roomFilter = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        sideBar1.setBackground(new java.awt.Color(245, 245, 245));

        bookingDate.setBorder(null);
        bookingDate.setFocusable(false);
        sideBar14.add(bookingDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));

        jLabel17.setForeground(new java.awt.Color(102, 0, 51));
        jLabel17.setText("Date de mise à jour");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar14.add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 120, 20));

        jLabel18.setBackground(new java.awt.Color(255, 255, 255));
        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar14.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        sideBar1.add(sideBar14, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 250, 50));

        customerMail.setForeground(new java.awt.Color(204, 204, 204));
        customerMail.setText("Mail");
        customerMail.setBorder(null);
        customerMail.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        sideBar15.add(customerMail, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));

        jLabel19.setForeground(new java.awt.Color(102, 0, 51));
        jLabel19.setText("Mail");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar15.add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 40, 20));

        jLabel20.setBackground(new java.awt.Color(255, 255, 255));
        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar15.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        sideBar1.add(sideBar15, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 70, 250, 50));

        customerSurname.setForeground(new java.awt.Color(204, 204, 204));
        customerSurname.setText("Nom");
        customerSurname.setBorder(null);
        customerSurname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerSurnameFocusGained(evt);
            }
        });
        ((AbstractDocument) customerSurname.getDocument()).setDocumentFilter(new UppercaseDocumentFilter());
        sideBar16.add(customerSurname, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));

        jPanel16.setBackground(new java.awt.Color(255, 255, 255));

        jLabel21.setForeground(new java.awt.Color(102, 0, 51));
        jLabel21.setText("Nom");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar16.add(jPanel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 40, 20));

        jLabel22.setBackground(new java.awt.Color(255, 255, 255));
        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar16.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        sideBar1.add(sideBar16, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 70, 250, 50));

        customerFirstName.setForeground(new java.awt.Color(204, 204, 204));
        customerFirstName.setText("Prénoms");
        customerFirstName.setBorder(null);
        sideBar17.add(customerFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));

        jPanel17.setBackground(new java.awt.Color(255, 255, 255));

        jLabel23.setForeground(new java.awt.Color(102, 0, 51));
        jLabel23.setText("Prénoms");

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar17.add(jPanel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 60, 20));

        jLabel24.setBackground(new java.awt.Color(255, 255, 255));
        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar17.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        sideBar1.add(sideBar17, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 70, 250, 50));

        visitDuration.setText("0");
        visitDuration.setBorder(null);
        visitDuration.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                visitDurationKeyReleased(evt);
            }
        });
        sideBar20.add(visitDuration, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));
        // Obtenir le Document du JTextField
        PlainDocument doc2 = (PlainDocument) visitDuration.getDocument();

        // Ajouter un DocumentFilter pour restreindre les entrées à des chiffres seulement
        doc2.setDocumentFilter(new NumericDocumentFilter());

        jPanel20.setBackground(new java.awt.Color(255, 255, 255));

        jLabel29.setForeground(new java.awt.Color(102, 0, 51));
        jLabel29.setText("Durée");

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar20.add(jPanel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 50, 20));

        jLabel30.setBackground(new java.awt.Color(255, 255, 255));
        jLabel30.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar20.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        sideBar1.add(sideBar20, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 150, 250, 50));

        outputDate.setForeground(new java.awt.Color(204, 204, 204));
        outputDate.setText("Date de sortie");
        outputDate.setBorder(null);
        outputDate.setFocusable(false);
        sideBar21.add(outputDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 200, 30));
        outputDate.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                textChanged();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                textChanged();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                textChanged();
            }

            // Méthode appelée lorsque le texte change
            private void textChanged() {
                SwingUtilities.invokeLater(() -> {
                    String text = outputDate.getText();
                    if (!text.equals("Date de sortie") && c > 4) {
                        java.util.Date inDate = inputDate.getDate();
                        java.sql.Date enterDate = new java.sql.Date(inDate.getTime());
                        try {
                            java.util.Date tmpDate = sdf.parse(text);
                            java.sql.Date exitDate = new java.sql.Date(tmpDate.getTime());
                            //chooseDisplayMethod(enterDate, exitDate);
                            display_AvailableBookingRooms(enterDate, exitDate);
                        } catch (ParseException ex) {
                            // Gérer l'erreur de parsing de la date ici
                            ex.printStackTrace();
                        }
                    } else {
                        // Obtenir la date d'aujourd'hui
                        LocalDate currentDate = LocalDate.now();

                        // Convertir la date d'aujourd'hui en objet Date
                        Date startDate = Date.valueOf(currentDate);
                        bookingDate.setText(sdf.format(startDate));
                        // Définir la date de fin (ici, nous utilisons la même date que la date de début)
                        Date endDate = Date.valueOf(currentDate);
                        if (c > 4) display_AvailableBookingRooms(startDate, endDate);
                    }
                    System.out.println(c);
                    c++;

                });
            }

        });

        jPanel21.setBackground(new java.awt.Color(255, 255, 255));

        jLabel31.setForeground(new java.awt.Color(102, 0, 51));
        jLabel31.setText("Date de sortie");

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar21.add(jPanel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 90, 20));

        jLabel32.setBackground(new java.awt.Color(255, 255, 255));
        jLabel32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar21.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 250, 50));

        sideBar1.add(sideBar21, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 150, 250, 50));

        roomsNumber.setBorder(null);
        roomsNumber.setFocusable(false);
        sideBar19.add(roomsNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 12, 180, 30));

        jPanel19.setBackground(new java.awt.Color(255, 255, 255));

        jLabel27.setForeground(new java.awt.Color(102, 0, 51));
        jLabel27.setText("N° Chambre");

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );

        sideBar19.add(jPanel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 80, 20));

        jLabel28.setBackground(new java.awt.Color(255, 255, 255));
        jLabel28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar19.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 50));

        sideBar1.add(sideBar19, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 150, 250, -1));

        jPanel18.setBackground(new java.awt.Color(255, 255, 255));

        jLabel25.setForeground(new java.awt.Color(102, 0, 51));
        jLabel25.setText("Date d'entrée");

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 14, Short.MAX_VALUE)
                .addGap(52, 52, 52))
        );

        sideBar18.add(jPanel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 90, 20));

        inputDate.setDateFormatString("dd / MM / yyyy");
        inputDate.setBackground(new java.awt.Color(255, 255, 255));
        sideBar18.add(inputDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 12, 200, 30));
        inputDate.setMinSelectableDate(new java.util.Date());

        // Ajouter un PropertyChangeListener pour détecter les changements de date
        inputDate.getDateEditor().addPropertyChangeListener("date", new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                // Récupérer la nouvelle date sélectionnée
                java.util.Date selectedDate1 = inputDate.getDate();
                if (!visitDuration.getText().equals("")) {
                    try {
                        int dayNumber = Integer.parseInt(visitDuration.getText());
                        if (dayNumber > 0) {
                            // Ajouter le nombre de jours à la date
                            Calendar calendar = Calendar.getInstance();
                            calendar.setTime(selectedDate1);
                            calendar.add(Calendar.DAY_OF_MONTH, dayNumber);
                            java.util.Date resultDate = calendar.getTime();
                            outputDate.setForeground(new Color(0, 0, 0));
                            outputDate.setText(sdf.format(resultDate));
                            if (!roomsNumber.getText().equals("Séléctionner dans le tableau") && !init.equals("init")) {
                                roomsNumber.setForeground(new Color(204, 204, 204));
                                roomsNumber.setText("Séléctionner dans le tableau");
                                try {
                                    DeleteRoomsBookedFromView.deleteRoomsBookedFromView(lastData);
                                } catch (ParseException ex) {
                                    Logger.getLogger(UpdateBookedRoomField.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            init = "not init";
                            // d++;
                        } else {
                            outputDate.setForeground(new Color(204, 204, 204));
                            outputDate.setText("Date de sortie");
                        }

                    } catch (NumberFormatException e) {

                    }
                }
            }
        });

        jLabel26.setBackground(new java.awt.Color(255, 255, 255));
        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingData.png"))); // NOI18N
        sideBar18.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 50));

        sideBar1.add(sideBar18, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 250, 50));

        jScrollPane2.setBorder(null);

        avalaibleRoomsBookingTable.setBackground(new Color(255, 255, 255));
        avalaibleRoomsBookingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "N°", "Désignation", "Type", "Prix Nuité (Ar)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        avalaibleRoomsBookingTable.setGridColor(new java.awt.Color(0, 51, 204));
        avalaibleRoomsBookingTable.setRowHeight(35);
        avalaibleRoomsBookingTable.setShowHorizontalLines(true);
        jScrollPane2.setViewportView(avalaibleRoomsBookingTable);
        //jScrollPane1.getViewport().setOpaque(false);
        jScrollPane2.getViewport().setBackground(new Color(255, 255, 255));
        avalaibleRoomsBookingTable.setDefaultRenderer(Object.class, new CenteredTableCellRenderer());

        // Créer une instance de CenteredHeaderRenderer avec la hauteur souhaitée
        int headerHeight2 = 35;
        Color backgroundColor2 = new Color(0, 51, 204); // Couleur de fond (SteelBlue)
        Color foregroundColor2 = Color.WHITE; // Couleur du texte (blanc)
        CenteredHeaderRenderer headerRenderer2 = new CenteredHeaderRenderer(headerHeight2, backgroundColor2, foregroundColor2);

        // Récupérer le modèle de colonne de la JTable
        TableColumnModel columnModel2 = avalaibleRoomsBookingTable.getColumnModel();

        // Appliquer le rendu de l'en-tête à chaque colonne de la JTable
        for (int i = 0; i < columnModel2.getColumnCount(); i++) {
            TableColumn column = columnModel2.getColumn(i);
            column.setHeaderRenderer(headerRenderer2);
        }

        sideBar1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 1110, 300));

        cancel.setBackground(new java.awt.Color(204, 204, 204));
        cancel.setText("Annuler");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        sideBar1.add(cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, 80, 30));

        test.setVisible(false);
        test.setForeground(new java.awt.Color(204, 0, 0));
        test.setText("Veuillez remplir tous les champs");
        sideBar1.add(test, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 220, 270, 20));

        buttonSave.setBackground(new java.awt.Color(153, 153, 153));
        buttonSave.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        buttonSave.setForeground(new java.awt.Color(255, 255, 255));
        buttonSave.setText("Enregistrer");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        sideBar1.add(buttonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, -1, 30));

        resendMail.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        resendMail.setText("Renvoyer un email");
        sideBar1.add(resendMail, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 210, 160, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookingFormField.png"))); // NOI18N
        sideBar1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 1140, 230));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 0));
        jLabel1.setText("Mise à jour d'une réservation");
        sideBar1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 6, 260, 30));

        searchField.setForeground(new java.awt.Color(204, 204, 204));
        searchField.setText("Rechercher une chambre");
        searchField.setBorder(null);
        searchField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchFieldFocusLost(evt);
            }
        });
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchFieldKeyReleased(evt);
            }
        });
        sideBar1.add(searchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 270, 220, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/loupe2.png"))); // NOI18N
        sideBar1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 260, 20, 40));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/training/Images/bookedRoomsSearch.png"))); // NOI18N
        sideBar1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 290, 40));

        roomFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N°", "Désignation", "Type" }));
        sideBar1.add(roomFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 270, 120, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sideBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1165, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sideBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void visitDurationKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_visitDurationKeyReleased
        try {
                java.util.Date selectedDate = inputDate.getDate();
                if (selectedDate != null) {
                    int dayNumber = Integer.parseInt(visitDuration.getText());
                    if (dayNumber > 0) {                  
                        // Ajouter le nombre de jours à la date
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(selectedDate);
                        calendar.add(Calendar.DAY_OF_MONTH, dayNumber);
                        java.util.Date resultDate = calendar.getTime();
                        outputDate.setForeground(new Color(0, 0, 0));
                        outputDate.setText(sdf.format(resultDate));
                        try {
                            DeleteRoomsBookedFromView.deleteRoomsBookedFromView(lastData);
                        } catch (ParseException ex) {
                            Logger.getLogger(UpdateBookedRoomField.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        //d++;
                    } else {
                        outputDate.setForeground(new Color(204, 204, 204));      
                        outputDate.setText("Date de sortie");
                    }
                }
            } catch (NumberFormatException e) {
                outputDate.setForeground(new Color(204, 204, 204));      
                outputDate.setText("Date de sortie");
            }
            if (!roomsNumber.getForeground().equals(new Color(204, 204, 204))) {
                roomsNumber.setForeground(new Color(204, 204, 204));
                roomsNumber.setText("Séléctionner dans le tableau");
            }
    }//GEN-LAST:event_visitDurationKeyReleased

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void customerSurnameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerSurnameFocusGained
        removePlaceholder(customerSurname);
    }//GEN-LAST:event_customerSurnameFocusGained

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        Color foregroundColor = new Color(204, 204, 204);
        String tmpBookDate = "";
        String name = "";
        String email = "";
        String tmpExitDate = "";
        String tmpRoomsNb = "";
        if (!bookingDate.getForeground().equals(foregroundColor) && !customerSurname.getForeground().equals(foregroundColor) && !customerFirstName.getForeground().equals(foregroundColor) && !customerMail.getForeground().equals(foregroundColor) && !outputDate.getForeground().equals(foregroundColor) && !roomsNumber.getForeground().equals(foregroundColor)) {
            tmpBookDate = bookingDate.getText();
            name = customerSurname.getText() + " " + customerFirstName.getText();
            email = customerMail.getText();
            tmpExitDate = outputDate.getText();
            tmpRoomsNb = roomsNumber.getText();
        }
        java.util.Date tmpEnterDate = inputDate.getDate();
        int dayNumber;
        try {
            dayNumber = Integer.parseInt(visitDuration.getText());
        } catch (NumberFormatException e) {
            dayNumber = 0;
        }
        // Vérification que les données ne sont pas vides
        if (!tmpBookDate.isEmpty() && !tmpRoomsNb.isEmpty() && tmpEnterDate != null && dayNumber > 0 && !name.isEmpty() && !email.isEmpty() && ValidEmailFormat.isValidEmail(email) && !tmpExitDate.isEmpty()) {
            if (name.equals(lastData[0]) && email.equals(lastData[1]) && sdf.format(tmpEnterDate).equals(lastData[3]) && tmpExitDate.equals(lastData[4]) && visitDuration.getText().equals(lastData[5]) && tmpRoomsNb.equals(lastData[6])) {
                System.out.println("Same Data");
                dispose();
                return;
            } else if(name.equals(lastData[0]) && email.equals(lastData[1]) && sdf.format(tmpEnterDate).equals(lastData[3]) && tmpExitDate.equals(lastData[4]) && visitDuration.getText().equals(lastData[5]) && !tmpRoomsNb.equals(lastData[6]) && lastData[6].split(", ").length == 1 && tmpRoomsNb.split(", ").length == 1) {
                System.out.println("Not Same Room");
                try {
                    UpdateSingleBookedRoom.updateSingleRoom(lastData, tmpRoomsNb);
                } catch (SQLException ex) {
                    Logger.getLogger(UpdateBookedRoomField.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (resendMail.isSelected()) {
                    loadingEmail(email, name, tmpRoomsNb, sdf.format(tmpEnterDate), tmpExitDate, dayNumber);
                }
                dispose();
                return;
            } else if (sdf.format(tmpEnterDate).equals(lastData[3]) && tmpExitDate.equals(lastData[4]) && visitDuration.getText().equals(lastData[5]) && tmpRoomsNb.equals(lastData[6])){
                System.out.println("Update Customer Information");
                UpdateCustomerInformation.updateCustomerInformation(lastData, name, email);
                if (resendMail.isSelected()) {
                    loadingEmail(email, name, tmpRoomsNb, sdf.format(tmpEnterDate), tmpExitDate, dayNumber);
                }
                dispose();
                return;
            } else if (sdf.format(tmpEnterDate).equals(lastData[3]) && tmpExitDate.equals(lastData[4]) && visitDuration.getText().equals(lastData[5]) && lastData[6].split(", ").length == 1 && tmpRoomsNb.split(", ").length == 1) {
                System.out.println("Update Customer Information and room");
                UpdateCustomerInformation.updateCustomerInformation(lastData, name, email, tmpRoomsNb);
                if (resendMail.isSelected()) {
                    loadingEmail(email, name, tmpRoomsNb, sdf.format(tmpEnterDate), tmpExitDate, dayNumber);
                }
                dispose();
                return;
            } 
            System.out.println("Insert Action");
            Date bookDate, exitDate, enterDate;
            try {
                bookDate = DateConvert.convertStringToSqlDate(tmpBookDate);
                enterDate = DateConvert.convertUtilDateToSqlDate(tmpEnterDate);
                exitDate = DateConvert.convertStringToSqlDate(tmpExitDate);
                String[] roomsNb = tmpRoomsNb.split(", ");
                Date[] dateInfo = {bookDate, enterDate, exitDate};
                String[] customerInfo = {name, email};
                ArrayList<String[]> lData = new ArrayList<>();
                lData.add(lastData);
                DeleteBookingRooms.deleteBookingRooms(lData);
                SaveBooking.saveBooking(dateInfo, roomsNb, customerInfo, dayNumber);
                RegisterTakenRooms.registerTakenRooms(roomsNb.length);
                //SendMail.sendMail(email, name, tmpRoomsNb, sdf.format(tmpEnterDate), tmpExitDate, dayNumber);
            } catch (ParseException e) {
                System.out.println(e);
            }
            if (resendMail.isSelected()) {
                    loadingEmail(email, name, tmpRoomsNb, sdf.format(tmpEnterDate), tmpExitDate, dayNumber);
            }
            dispose();
        } else {
            // Afficher un message d'erreur ou prendre une autre action appropriée
            test.setVisible(true);
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void loadingEmail(String email, String name, String tmpRoomsNb, String tmpEnterDate, String tmpExitDate, int dayNumber) {
        JDialog loadingDialog = new JDialog(this, "Envoi de l'email", true);
        loadingDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        loadingDialog.setSize(200, 100);
        loadingDialog.setLocationRelativeTo(this);

        JLabel loadingLabel = new JLabel(new javax.swing.ImageIcon(getClass().getResource("/training/Images/loading.gif")));
        loadingDialog.add(loadingLabel, BorderLayout.CENTER);
        loadingDialog.pack();

        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                SendMail.sendMail(email, name, tmpRoomsNb, tmpEnterDate, tmpExitDate, dayNumber);
                return null;
            }
            @Override
            protected void done() {
                loadingDialog.dispose();
                JOptionPane.showMessageDialog(null, "Email envoyé", "Confirmation", JOptionPane.INFORMATION_MESSAGE);
            }
        };
        worker.execute(); 
        loadingDialog.setVisible(true);
    }
    
    private void searchFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFieldFocusGained
        removePlaceholder(searchField);
    }//GEN-LAST:event_searchFieldFocusGained

    private void searchFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFieldFocusLost
        addPlaceholder(searchField, "Rechercher une chambre");
    }//GEN-LAST:event_searchFieldFocusLost

    private void searchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyReleased
        if (!inputDate.getDate().equals(null) && !outputDate.getText().equals("Date de sortie")) {
            try {
                DeleteRoomsBookedFromView.deleteRoomsBookedFromView(lastData);
            } catch (ParseException ex) {
                Logger.getLogger(UpdateBookedRoomField.class.getName()).log(Level.SEVERE, null, ex);
            }
            String key = searchField.getText();
            String filter = (String) roomFilter.getSelectedItem();
            if (key.equals("")) try {
                display_AvailableBookingRooms(DateConvert.convertUtilDateToSqlDate(inputDate.getDate()), DateConvert.convertStringToSqlDate(outputDate.getText()));
            } catch (ParseException ex) {
                Logger.getLogger(UpdateBookedRoomField.class.getName()).log(Level.SEVERE, null, ex);
            } else {
                switch (filter) {
                    case "N°" -> {
                        try {
                            display_AvailableBookingRooms(DateConvert.convertUtilDateToSqlDate(inputDate.getDate()), DateConvert.convertStringToSqlDate(outputDate.getText()), key, "number");
                        } catch (ParseException ex) {
                            Logger.getLogger(UpdateBookedRoomField.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    case "Désignation" -> {
                        try {
                            display_AvailableBookingRooms(DateConvert.convertUtilDateToSqlDate(inputDate.getDate()), DateConvert.convertStringToSqlDate(outputDate.getText()), key, "design");
                        } catch (ParseException ex) {
                            Logger.getLogger(UpdateBookedRoomField.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    default -> {
                        try {
                            display_AvailableBookingRooms(DateConvert.convertUtilDateToSqlDate(inputDate.getDate()), DateConvert.convertStringToSqlDate(outputDate.getText()), key, "type");
                        } catch (ParseException ex) {
                            Logger.getLogger(UpdateBookedRoomField.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_searchFieldKeyReleased

    public void initLastData(String[] lastData) {
        this.lastData = lastData;
    }
    
    public void display_AvailableBookingRooms(Date startDate, Date endDate ) {
        ArrayList<String[]> listData = AvailableViewBookingRooms.selectRooms(startDate, endDate);
        DefaultTableModel tblModel = (DefaultTableModel) avalaibleRoomsBookingTable.getModel();
        tblModel.setRowCount(0); // Effacer toutes les lignes existantes
        if (!listData.isEmpty()) {
            for (String[] data : listData) {
                // Créer un nouveau tableau d'objets pour représenter la ligne de la table
                Object[] rowData = new Object[data.length + 1]; // +1 pour la colonne booléenne

                // La première colonne est un booléen initialisé à false
                rowData[0] = false;

                // Copier les données de la liste dans les colonnes suivantes
                System.arraycopy(data, 0, rowData, 1, data.length);

                // Ajouter la ligne au modèle de la table
                tblModel.addRow(rowData);
            }
        }else {
            System.out.print("Vide");
        }
            

        // Ajouter des écouteurs aux checkboxes
        addCheckboxListeners(avalaibleRoomsBookingTable);
    }
    
    public void display_AvailableBookingRooms(Date startDate, Date endDate, String keyWord, String filter) {
        ArrayList<String[]> listData = SearchAvailableRoomForUpdate.searchAvailableRoomForUpdate(startDate, endDate, keyWord, filter);
        DefaultTableModel tblModel = (DefaultTableModel) avalaibleRoomsBookingTable.getModel();
        tblModel.setRowCount(0); // Effacer toutes les lignes existantes
        if (!listData.isEmpty()) {
            for (String[] data : listData) {
                // Créer un nouveau tableau d'objets pour représenter la ligne de la table
                Object[] rowData = new Object[data.length + 1]; // +1 pour la colonne booléenne

                // La première colonne est un booléen initialisé à false
                rowData[0] = false;

                // Copier les données de la liste dans les colonnes suivantes
                System.arraycopy(data, 0, rowData, 1, data.length);

                // Ajouter la ligne au modèle de la table
                tblModel.addRow(rowData);
            }
        }else {
            System.out.print("Vide");
        }
            

        // Ajouter des écouteurs aux checkboxes
        addCheckboxListeners(avalaibleRoomsBookingTable);
    }
    
    public void displayAvailableBookingRooms(Date startDate, Date endDate, String[] roomsNb, String step ) {
        ArrayList<String[]> listData = AvailableBookingRooms.selectRooms(startDate, endDate);
        ArrayList<String[]> listRoomData = new ArrayList<>();
        for (String nb : roomsNb) {
            listRoomData.add(TemporaryBookedRoom.temporaryBookedRoom(nb));
        }
        DefaultTableModel tblModel = (DefaultTableModel) avalaibleRoomsBookingTable.getModel();
        tblModel.setRowCount(0); // Effacer toutes les lignes existantes
        for (String[] data : listRoomData) {
            // Créer un nouveau tableau d'objets pour représenter la ligne de la table
            Object[] rowData = new Object[data.length + 1]; // +1 pour la colonne booléenne
            // La première colonne est un booléen initialisé à false
            rowData[0] = step.equals("init");

            // Copier les données de la liste dans les colonnes suivantes
            System.arraycopy(data, 0, rowData, 1, data.length);

            // Ajouter la ligne au modèle de la table
            tblModel.addRow(rowData);
        }
        
        if (!listData.isEmpty()) {
            for (String[] data : listData) {
                // Créer un nouveau tableau d'objets pour représenter la ligne de la table
                Object[] rowData = new Object[data.length + 1]; // +1 pour la colonne booléenne

                // La première colonne est un booléen initialisé à false
                rowData[0] = false;

                // Copier les données de la liste dans les colonnes suivantes
                System.arraycopy(data, 0, rowData, 1, data.length);

                // Ajouter la ligne au modèle de la table
                tblModel.addRow(rowData);
            }
        }else {
            System.out.print("Vide");
        }
            

        // Ajouter des écouteurs aux checkboxes
        addCheckboxListeners(avalaibleRoomsBookingTable);
    }
    
    private void addCheckboxListeners(JTable table) {
        TableColumn checkBoxColumn = table.getColumnModel().getColumn(0);
        checkBoxColumn.setCellEditor(new DefaultCellEditor(new JCheckBox()));
        checkBoxColumn.setCellRenderer(table.getDefaultRenderer(Boolean.class));
        table.getModel().addTableModelListener(e -> recoverAvailableRooms());
    }

    private void recoverAvailableRooms() {
        ArrayList<String> roomsNb = getCheckedValues(avalaibleRoomsBookingTable);
        String rooms = new String();
        int i = 0;
        for (String room : roomsNb) {
            if (i == 0) {
                rooms+=room;
                i+=1;
            } else {
                rooms+=", "+room;
            }
        }
        if (!rooms.equals("")) {
            roomsNumber.setForeground(new Color(0, 0, 0));
            roomsNumber.setText(rooms);
        }
        else {
            roomsNumber.setForeground(new Color(204, 204, 204));
            roomsNumber.setText("Séléctionner dans le tableau");
        }      
    }
    
    public ArrayList<String> getCheckedValues(JTable table) {
        ArrayList<String> checkedValues = new ArrayList<>();
        DefaultTableModel tblModel = (DefaultTableModel) table.getModel();
            for (int i = 0; i < tblModel.getRowCount(); i++) {
                // Vérifier si la checkbox de la première colonne est cochée
                if ((Boolean) tblModel.getValueAt(i, 0)) {
                    // Ajouter la valeur de la deuxième colonne à la liste
                    checkedValues.add((String) tblModel.getValueAt(i, 1));
                }
            }      
        return checkedValues;
    }
    
   private void addPlaceholder(JTextField field, String text) {
        if (field.getText().equals("")) {
            field.setForeground(new Color(204, 204, 204));
            field.setText(text);
        }
    }
    
    private void removePlaceholder(JTextField field) {
        Color placeholderColor = new Color(204, 204, 204);
        if (field.getForeground().equals(placeholderColor)) {
            field.setText("");
            field.setForeground(new Color(0, 0, 0));
        }
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(UpdateBookedRoomField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(UpdateBookedRoomField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(UpdateBookedRoomField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(UpdateBookedRoomField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new UpdateBookedRoomField().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTable avalaibleRoomsBookingTable;
    public javax.swing.JTextField bookingDate;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton cancel;
    public javax.swing.JTextField customerFirstName;
    public javax.swing.JTextField customerMail;
    public javax.swing.JTextField customerSurname;
    public com.toedter.calendar.JDateChooser inputDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextField outputDate;
    private javax.swing.JCheckBox resendMail;
    private javax.swing.JComboBox<String> roomFilter;
    public javax.swing.JTextField roomsNumber;
    private javax.swing.JTextField searchField;
    public training.SideBar sideBar1;
    private training.SideBar sideBar14;
    private training.SideBar sideBar15;
    private training.SideBar sideBar16;
    private training.SideBar sideBar17;
    private training.SideBar sideBar18;
    private training.SideBar sideBar19;
    private training.SideBar sideBar20;
    private training.SideBar sideBar21;
    private javax.swing.JLabel test;
    public javax.swing.JTextField visitDuration;
    // End of variables declaration//GEN-END:variables
}
